;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;	This program is free software: you can redistribute it and/or modify								;;
;	it under the terms of the GNU General Public License as published by								;;
;	the Free Software Foundation, either version 3 of the License, or									;;
;	(at your option) any later version.																	;;
;																										;;
;	This program is distributed in the hope that it will be useful,										;;
;	but WITHOUT ANY WARRANTY without even the implied warranty of										;;
;	MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the										;;
;	GNU General Public License for more details.														;;
;																										;;
;	You should have received a copy of the GNU General Public License									;;
;	along with this program.  If not, see <http://www.gnu.org/licenses/>.								;;
;																										;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;	v0.02 Pixelated; Gimp v2.10																			;;
;;	(de)	http://www.3d-hobby-art.de/news/204-gimp-script-fu-pixelated-verpixelt.html					;;
;;	(eng)	http://www.3d-hobby-art.de/en/blog/205-gimp-script-fu-pixelated.html						;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(script-fu-register
	"script-fu-pixelated"															;func name
	"Pixelated! (free) ..."																;menu label
	"This effect will break apart your photo into various sized pixel squares."		;desc
	"Stephan W."
	"(c) 2016, 3d-hobby-art.de"									;copyright notice
	"October 23, 2016"																;date created
	"RGBA, RGB"																		;image type that the script works on
	SF-IMAGE		"Image"						0
	SF-DRAWABLE		"The layer"					0
	SF-OPTION		_"Direction"				'("Right" "Left")
	SF-TOGGLE		"Run Interactive Mode?"		FALSE
	SF-TOGGLE		"Undo Mode?"				FALSE
)
(script-fu-menu-register "script-fu-pixelated" "<Image>/Script-Fu/Pixelated! Effect")

(define (script-fu-pixelated img drawable inPixelDirection inRunMode inUndoMode)

	;;
	(define (gimp-message-and-quit message)
		(let  
			;;
			((old-handler (car (gimp-message-get-handler))) )
			(gimp-message-set-handler MESSAGE-BOX)
			(gimp-message message)
			;;
			(gimp-message-set-handler old-handler)
			(quit)
		)
	)

	(let* ( 
			(bg-layer (car (gimp-image-get-layer-by-name img "background")))
			(brush-mask-layer (car (gimp-image-get-layer-by-name img "area-brush")))
			(old-bg (car (gimp-context-get-background)))
			(old-fg (car (gimp-context-get-foreground)))
			(ImageWidth  (car (gimp-image-width  img)))
			(ImageHeight (car (gimp-image-height img)))
			(small-layer (car (gimp-layer-new img ImageWidth ImageHeight RGBA-IMAGE "small (tmp)" 100 0)))
			(small-layer-pixels (car (gimp-layer-new img ImageWidth ImageHeight RGBA-IMAGE "small pixels (tmp)" 100 0)))
			(medium-layer (car (gimp-layer-new img ImageWidth ImageHeight RGBA-IMAGE "medium (tmp)" 100 0)))
			(medium-layer-pixels (car (gimp-layer-new img ImageWidth ImageHeight RGBA-IMAGE "medium pixels (tmp)" 100 0)))
			(large-layer (car (gimp-layer-new img ImageWidth ImageHeight RGBA-IMAGE "large (tmp)" 100 0)))
			(large-layer-pixels (car (gimp-layer-new img ImageWidth ImageHeight RGBA-IMAGE "large pixels (tmp)" 100 0)))
			(very-large-layer (car (gimp-layer-new img ImageWidth ImageHeight RGBA-IMAGE "very large (tmp)" 100 0)))
			(very-large-layer-pixels (car (gimp-layer-new img ImageWidth ImageHeight RGBA-IMAGE "very large pixels (tmp)" 100 0)))
			(pixel-group-small (car (gimp-layer-group-new img)))
			(pixel-group-small-dodge (car (gimp-layer-group-new img)))
			(pixel-group-medium (car (gimp-layer-group-new img)))
			(pixel-group-large (car (gimp-layer-group-new img)))
			(pixel-group-very-large (car (gimp-layer-group-new img)))
			(small-parts-layer (car (gimp-layer-new img ImageWidth ImageHeight RGBA-IMAGE "s1" 100 0)))
			(medium-parts-layer (car (gimp-layer-new img ImageWidth ImageHeight RGBA-IMAGE "m1" 100 0)))
			(large-parts-layer (car (gimp-layer-new img ImageWidth ImageHeight RGBA-IMAGE "l1" 100 0)))
			(very-large-parts-layer (car (gimp-layer-new img ImageWidth ImageHeight RGBA-IMAGE "vl1" 100 0)))
			(small-overlay-layer (car (gimp-layer-new img ImageWidth ImageHeight RGBA-IMAGE "grid pixel overlay (small)" 70 OVERLAY-MODE)))
			(small-overlay-layer-mask)
			(medium-overlay-layer (car (gimp-layer-new img ImageWidth ImageHeight RGBA-IMAGE "grid pixel overlay (medium)" 50 SCREEN-MODE)))
			(medium-overlay-layer-mask)
			(floating-selection)
			(seed)
		)

		;;
		(if  ( = (car (gimp-image-get-layer-by-name img "background")) -1)
			(gimp-message-and-quit "There is no \"background\" layer! Tutorial - please read. \n Keine \"background\" -Ebene gefunden! Bitte lesen Sie mein Tutorial.")
		)
		(if  ( = (car (gimp-image-get-layer-by-name img "area-brush")) -1)
			(gimp-message-and-quit "There is no \"area-brush\" layer! Tutorial - please read. \n Keine \"area-brush\" -Ebene gefunden! Bitte lesen Sie mein Tutorial.")
		)
		
		;;
		(set! seed (if (number? seed) seed (realtime)))


		;;
		(if (= inUndoMode TRUE) (begin (gimp-image-undo-group-start img)) )
		(gimp-context-push)

		;;
		(gimp-image-lower-item-to-bottom img (car (gimp-image-get-layer-by-name img "area-brush")))
		(gimp-item-set-visible (car (gimp-image-get-layer-by-name img "area-brush")) FALSE)


		;;
		;; ************************************************************************************************************************************		
		(gimp-image-set-active-layer img bg-layer)
		(let* (
				(varDupLayer (car (gimp-layer-copy bg-layer 1)))
			)
			(gimp-image-insert-layer img varDupLayer 0 -1)
			(gimp-selection-layer-alpha (car (gimp-image-get-layer-by-name img "area-brush")))
			(gimp-selection-invert img)
			(gimp-edit-clear varDupLayer)
			(gimp-selection-none img)
			; (plug-in-hsv-noise (if (= inRunMode TRUE) (begin RUN-INTERACTIVE) RUN-NONINTERACTIVE) img varDupLayer 2 5 8 8)
			(gimp-item-set-visible varDupLayer FALSE)
			(gimp-layer-set-name varDupLayer "area-brush extract (tmp)")
		)

		;;
		;; ************************************************************************************************************************************
		(gimp-image-add-layer img small-layer 0)
		(gimp-image-set-active-layer img small-layer)
		(gimp-context-set-background '(255 255 255))
		(gimp-edit-fill small-layer BACKGROUND-FILL)
		(plug-in-solid-noise (if (= inRunMode TRUE) (begin RUN-INTERACTIVE) RUN-NONINTERACTIVE) img small-layer TRUE FALSE (srand seed) 4 8 8)
		(gimp-levels-auto small-layer)
		(plug-in-pixelize (if (= inRunMode TRUE) (begin RUN-INTERACTIVE) RUN-NONINTERACTIVE) img small-layer (+ 14 (rand 4)))

		;;
		;; ************************************************************************************************************************************
		(gimp-image-set-active-layer img small-layer)
		(let* (
				(varDupLayer (car (gimp-layer-copy (car (gimp-image-get-active-layer img)) 1)))
			)
			(gimp-image-insert-layer img varDupLayer 0 -1)
			(gimp-layer-set-mode varDupLayer DARKEN-ONLY-MODE)
			(plug-in-edge RUN-NONINTERACTIVE img varDupLayer 2 1 0)
			(gimp-invert varDupLayer)
			(gimp-threshold varDupLayer 255 255)
			(gimp-layer-set-name varDupLayer "small edge (tmp)")
		)
		
		(gimp-edit-copy-visible img)
		(gimp-image-add-layer img small-layer-pixels 0)
		(set! floating-selection (car (gimp-edit-paste small-layer-pixels FALSE)))
		(gimp-floating-sel-anchor floating-selection)
		
		(gimp-image-remove-layer img (car (gimp-image-get-layer-by-name img "small edge (tmp)")))
		(gimp-image-remove-layer img small-layer)
		;;


		;;
		;; ************************************************************************************************************************************
		(gimp-image-add-layer img medium-layer 0)
		(gimp-image-set-active-layer img medium-layer)
		(gimp-context-set-background '(255 255 255))
		(gimp-edit-fill medium-layer BACKGROUND-FILL)
		(plug-in-solid-noise (if (= inRunMode TRUE) (begin RUN-INTERACTIVE) RUN-NONINTERACTIVE) img medium-layer TRUE FALSE (srand seed) 2 8 8)
		(gimp-levels-auto medium-layer)
		(plug-in-pixelize (if (= inRunMode TRUE) (begin RUN-INTERACTIVE) RUN-NONINTERACTIVE) img medium-layer (+ 24 (rand 6)))

		;;
		;; ************************************************************************************************************************************
		(gimp-image-set-active-layer img medium-layer)
		(let* (
				(varDupLayer (car (gimp-layer-copy (car (gimp-image-get-active-layer img)) 1)))
			)
			(gimp-image-insert-layer img varDupLayer 0 -1)
			(gimp-layer-set-mode varDupLayer DARKEN-ONLY-MODE)
			(plug-in-edge RUN-NONINTERACTIVE img varDupLayer 2 1 0)
			(gimp-invert varDupLayer)
			(gimp-threshold varDupLayer 255 255)
			(gimp-layer-set-name varDupLayer "medium edge (tmp)")
		)
		
		(gimp-edit-copy-visible img)
		(gimp-image-add-layer img medium-layer-pixels 0)
		(set! floating-selection (car (gimp-edit-paste medium-layer-pixels FALSE)))
		(gimp-floating-sel-anchor floating-selection)
		
		(gimp-image-remove-layer img (car (gimp-image-get-layer-by-name img "medium edge (tmp)")))
		(gimp-image-remove-layer img medium-layer)
		;;
		
		
		;;
		;; ************************************************************************************************************************************
		(gimp-image-add-layer img large-layer 0)
		(gimp-image-set-active-layer img large-layer)
		(gimp-context-set-background '(255 255 255))
		(gimp-edit-fill large-layer BACKGROUND-FILL)
		(plug-in-solid-noise (if (= inRunMode TRUE) (begin RUN-INTERACTIVE) RUN-NONINTERACTIVE) img large-layer TRUE FALSE (srand seed) 4 8 8)
		(gimp-levels-auto large-layer)
		(plug-in-pixelize (if (= inRunMode TRUE) (begin RUN-INTERACTIVE) RUN-NONINTERACTIVE) img large-layer (+ 42 (rand 8)))

		;;
		;; ************************************************************************************************************************************
		(gimp-image-set-active-layer img large-layer)
		(let* (
				(varDupLayer (car (gimp-layer-copy (car (gimp-image-get-active-layer img)) 1)))
			)
			(gimp-image-insert-layer img varDupLayer 0 -1)
			(gimp-layer-set-mode varDupLayer DARKEN-ONLY-MODE)
			(plug-in-edge RUN-NONINTERACTIVE img varDupLayer 2 1 0)
			(gimp-invert varDupLayer)
			(gimp-threshold varDupLayer 255 255)
			(gimp-layer-set-name varDupLayer "large edge (tmp)")
		)
		
		(gimp-edit-copy-visible img)
		(gimp-image-add-layer img large-layer-pixels 0)
		(set! floating-selection (car (gimp-edit-paste large-layer-pixels FALSE)))
		(gimp-floating-sel-anchor floating-selection)
		
		(gimp-image-remove-layer img (car (gimp-image-get-layer-by-name img "large edge (tmp)")))
		(gimp-image-remove-layer img large-layer)
		;;
		

		;;
		;; ************************************************************************************************************************************
		(gimp-image-add-layer img very-large-layer 0)
		(gimp-image-set-active-layer img very-large-layer)
		(gimp-context-set-background '(255 255 255))
		(gimp-edit-fill very-large-layer BACKGROUND-FILL)
		(plug-in-solid-noise (if (= inRunMode TRUE) (begin RUN-INTERACTIVE) RUN-NONINTERACTIVE) img very-large-layer TRUE FALSE (srand seed) 2 8 8)
		(gimp-levels-auto very-large-layer)
		(plug-in-pixelize (if (= inRunMode TRUE) (begin RUN-INTERACTIVE) RUN-NONINTERACTIVE) img very-large-layer (+ 58 (rand 12)))

		;;
		;; ************************************************************************************************************************************
		(gimp-image-set-active-layer img very-large-layer)
		(let* (
				(varDupLayer (car (gimp-layer-copy (car (gimp-image-get-active-layer img)) 1)))
			)
			(gimp-image-insert-layer img varDupLayer 0 -1)
			(gimp-layer-set-mode varDupLayer DARKEN-ONLY-MODE)
			(plug-in-edge RUN-NONINTERACTIVE img varDupLayer 2 1 0)
			(gimp-invert varDupLayer)
			(gimp-threshold varDupLayer 255 255)
			(gimp-layer-set-name varDupLayer "very large edge (tmp)")
		)
		
		(gimp-edit-copy-visible img)
		(gimp-image-add-layer img very-large-layer-pixels 0)
		(set! floating-selection (car (gimp-edit-paste very-large-layer-pixels FALSE)))
		(gimp-floating-sel-anchor floating-selection)
		
		(gimp-image-remove-layer img (car (gimp-image-get-layer-by-name img "very large edge (tmp)")))
		(gimp-image-remove-layer img very-large-layer)
		(gimp-brightness-contrast (car (gimp-image-get-layer-by-name img "very large pixels (tmp)")) 30 10)
		;;

		
		(gimp-item-set-visible (car (gimp-image-get-layer-by-name img "small pixels (tmp)")) FALSE)
		(gimp-item-set-visible (car (gimp-image-get-layer-by-name img "medium pixels (tmp)")) FALSE)
		(gimp-item-set-visible (car (gimp-image-get-layer-by-name img "large pixels (tmp)")) FALSE)
		(gimp-item-set-visible (car (gimp-image-get-layer-by-name img "very large pixels (tmp)")) FALSE)
		
		;;
		(gimp-image-set-active-layer img bg-layer)
		(gimp-image-insert-layer img pixel-group-small-dodge 0 -1)
		(gimp-item-set-name pixel-group-small-dodge "Pixels! parts (doge Mode)")
		(gimp-layer-set-mode (car (gimp-image-get-layer-by-name img "Pixels! parts (doge Mode)")) DODGE-MODE)
		
		;;
		;; ************************************************************************************************************************************
		(gimp-context-set-feather 0)
		(gimp-by-color-select (car (gimp-image-get-layer-by-name img "small pixels (tmp)")) '(245 245 245) 2 CHANNEL-OP-ADD TRUE FALSE 0 FALSE)
		(gimp-edit-copy (car (gimp-image-get-layer-by-name img "area-brush extract (tmp)")))

		(gimp-image-set-active-layer img bg-layer)
		(gimp-image-insert-layer img pixel-group-small 0 -1)
		(gimp-item-set-name pixel-group-small "Pixels! small parts")
		
		(gimp-image-insert-layer img small-parts-layer pixel-group-small 0)
		(set! floating-selection (car (gimp-edit-paste small-parts-layer FALSE)))
		(gimp-floating-sel-anchor floating-selection)

		(gimp-image-set-active-layer img (car (gimp-image-get-layer-by-name img "s1")))
		(let* (
				(varDupLayer (car (gimp-layer-copy (car (gimp-image-get-active-layer img)) 1)))
			)
			(gimp-image-insert-layer img varDupLayer 0 -1)
			(gimp-selection-all img)
			(gimp-edit-clear varDupLayer)
			(gimp-selection-none img)
			(gimp-by-color-select (car (gimp-image-get-layer-by-name img "small pixels (tmp)")) '(225 225 225) 2 CHANNEL-OP-ADD TRUE FALSE 0 FALSE)
			(gimp-edit-copy (car (gimp-image-get-layer-by-name img "area-brush extract (tmp)")))
			(set! floating-selection (car (gimp-edit-paste varDupLayer FALSE)))
			(gimp-floating-sel-anchor floating-selection)
			(gimp-layer-set-name varDupLayer "s2")
		)
		(gimp-image-set-active-layer img (car (gimp-image-get-layer-by-name img "s2")))
		(let* (
				(varDupLayer (car (gimp-layer-copy (car (gimp-image-get-active-layer img)) 1)))
			)
			(gimp-image-insert-layer img varDupLayer 0 -1)
			(gimp-selection-all img)
			(gimp-edit-clear varDupLayer)
			(gimp-selection-none img)
			(gimp-by-color-select (car (gimp-image-get-layer-by-name img "small pixels (tmp)")) '(220 220 220) 2 CHANNEL-OP-ADD TRUE FALSE 0 FALSE)
			(gimp-edit-copy (car (gimp-image-get-layer-by-name img "area-brush extract (tmp)")))
			(set! floating-selection (car (gimp-edit-paste varDupLayer FALSE)))
			(gimp-floating-sel-anchor floating-selection)
			(gimp-layer-set-name varDupLayer "s3")
		)
		(gimp-image-set-active-layer img (car (gimp-image-get-layer-by-name img "s3")))
		(let* (
				(varDupLayer (car (gimp-layer-copy (car (gimp-image-get-active-layer img)) 1)))
			)
			(gimp-image-insert-layer img varDupLayer 0 -1)
			(gimp-selection-all img)
			(gimp-edit-clear varDupLayer)
			(gimp-selection-none img)
			(gimp-by-color-select (car (gimp-image-get-layer-by-name img "small pixels (tmp)")) '(216 216 216) 1 CHANNEL-OP-ADD TRUE FALSE 0 FALSE)
			(gimp-edit-copy (car (gimp-image-get-layer-by-name img "area-brush extract (tmp)")))
			(set! floating-selection (car (gimp-edit-paste varDupLayer FALSE)))
			(gimp-floating-sel-anchor floating-selection)
			(gimp-layer-set-name varDupLayer "s4")
		)
		(gimp-image-set-active-layer img (car (gimp-image-get-layer-by-name img "s4")))
		(let* (
				(varDupLayer (car (gimp-layer-copy (car (gimp-image-get-active-layer img)) 1)))
			)
			(gimp-image-insert-layer img varDupLayer 0 -1)
			(gimp-selection-all img)
			(gimp-edit-clear varDupLayer)
			(gimp-selection-none img)
			(gimp-by-color-select (car (gimp-image-get-layer-by-name img "small pixels (tmp)")) '(206 206 206) 1 CHANNEL-OP-ADD TRUE FALSE 0 FALSE)
			(gimp-edit-copy (car (gimp-image-get-layer-by-name img "area-brush extract (tmp)")))
			(set! floating-selection (car (gimp-edit-paste varDupLayer FALSE)))
			(gimp-floating-sel-anchor floating-selection)
			(gimp-layer-set-name varDupLayer "s5")
		)
		(gimp-image-set-active-layer img (car (gimp-image-get-layer-by-name img "s5")))
		(let* (
				(varDupLayer (car (gimp-layer-copy (car (gimp-image-get-active-layer img)) 1)))
			)
			(gimp-image-insert-layer img varDupLayer 0 -1)
			(gimp-selection-all img)
			(gimp-edit-clear varDupLayer)
			(gimp-selection-none img)
			(gimp-by-color-select (car (gimp-image-get-layer-by-name img "small pixels (tmp)")) '(199 199 199) 1 CHANNEL-OP-ADD TRUE FALSE 0 FALSE)
			(gimp-edit-copy (car (gimp-image-get-layer-by-name img "area-brush extract (tmp)")))
			(set! floating-selection (car (gimp-edit-paste varDupLayer FALSE)))
			(gimp-floating-sel-anchor floating-selection)
			(gimp-layer-set-name varDupLayer "s6")
		)
		(gimp-image-set-active-layer img (car (gimp-image-get-layer-by-name img "s6")))
		(let* (
				(varDupLayer (car (gimp-layer-copy (car (gimp-image-get-active-layer img)) 1)))
			)
			(gimp-image-insert-layer img varDupLayer 0 -1)
			(gimp-selection-all img)
			(gimp-edit-clear varDupLayer)
			(gimp-selection-none img)
			(gimp-by-color-select (car (gimp-image-get-layer-by-name img "small pixels (tmp)")) '(193 193 193) 1 CHANNEL-OP-ADD TRUE FALSE 0 FALSE)
			(gimp-edit-copy (car (gimp-image-get-layer-by-name img "area-brush extract (tmp)")))
			(set! floating-selection (car (gimp-edit-paste varDupLayer FALSE)))
			(gimp-floating-sel-anchor floating-selection)
			(gimp-layer-set-name varDupLayer "s7")
		)
		(gimp-image-set-active-layer img (car (gimp-image-get-layer-by-name img "s7")))
		(let* (
				(varDupLayer (car (gimp-layer-copy (car (gimp-image-get-active-layer img)) 1)))
			)
			(gimp-image-insert-layer img varDupLayer 0 -1)
			(gimp-selection-all img)
			(gimp-edit-clear varDupLayer)
			(gimp-selection-none img)
			(gimp-by-color-select (car (gimp-image-get-layer-by-name img "small pixels (tmp)")) '(181 181 181) 1 CHANNEL-OP-ADD TRUE FALSE 0 FALSE)
			(gimp-edit-copy (car (gimp-image-get-layer-by-name img "area-brush extract (tmp)")))
			(set! floating-selection (car (gimp-edit-paste varDupLayer FALSE)))
			(gimp-floating-sel-anchor floating-selection)
			(gimp-layer-set-name varDupLayer "s8")
		)
		(gimp-image-set-active-layer img (car (gimp-image-get-layer-by-name img "s8")))
		(let* (
				(varDupLayer (car (gimp-layer-copy (car (gimp-image-get-active-layer img)) 1)))
			)
			(gimp-image-insert-layer img varDupLayer 0 -1)
			(gimp-selection-all img)
			(gimp-edit-clear varDupLayer)
			(gimp-selection-none img)
			(gimp-by-color-select (car (gimp-image-get-layer-by-name img "small pixels (tmp)")) '(175 175 175) 2 CHANNEL-OP-ADD TRUE FALSE 0 FALSE)
			(gimp-edit-copy (car (gimp-image-get-layer-by-name img "area-brush extract (tmp)")))
			(set! floating-selection (car (gimp-edit-paste varDupLayer FALSE)))
			(gimp-floating-sel-anchor floating-selection)
			(gimp-layer-set-name varDupLayer "s9")
		)
		(gimp-image-set-active-layer img (car (gimp-image-get-layer-by-name img "s9")))
		(let* (
				(varDupLayer (car (gimp-layer-copy (car (gimp-image-get-active-layer img)) 1)))
			)
			(gimp-image-insert-layer img varDupLayer 0 -1)
			(gimp-selection-all img)
			(gimp-edit-clear varDupLayer)
			(gimp-selection-none img)
			(gimp-by-color-select (car (gimp-image-get-layer-by-name img "small pixels (tmp)")) '(167 167 167) 1 CHANNEL-OP-ADD TRUE FALSE 0 FALSE)
			(gimp-edit-copy (car (gimp-image-get-layer-by-name img "area-brush extract (tmp)")))
			(set! floating-selection (car (gimp-edit-paste varDupLayer FALSE)))
			(gimp-floating-sel-anchor floating-selection)
			(gimp-layer-set-name varDupLayer "s10")
		)
		(gimp-image-set-active-layer img (car (gimp-image-get-layer-by-name img "s10")))
		(let* (
				(varDupLayer (car (gimp-layer-copy (car (gimp-image-get-active-layer img)) 1)))
			)
			(gimp-image-insert-layer img varDupLayer 0 -1)
			(gimp-selection-all img)
			(gimp-edit-clear varDupLayer)
			(gimp-selection-none img)
			(gimp-by-color-select (car (gimp-image-get-layer-by-name img "small pixels (tmp)")) '(135 135 135) 1 CHANNEL-OP-ADD TRUE FALSE 0 FALSE)
			(gimp-edit-copy (car (gimp-image-get-layer-by-name img "area-brush extract (tmp)")))
			(set! floating-selection (car (gimp-edit-paste varDupLayer FALSE)))
			(gimp-floating-sel-anchor floating-selection)
			(gimp-layer-set-name varDupLayer "s11")
		)
		(gimp-image-set-active-layer img (car (gimp-image-get-layer-by-name img "s11")))
		(let* (
				(varDupLayer (car (gimp-layer-copy (car (gimp-image-get-active-layer img)) 1)))
			)
			(gimp-image-insert-layer img varDupLayer 0 -1)
			(gimp-selection-all img)
			(gimp-edit-clear varDupLayer)
			(gimp-selection-none img)
			(gimp-by-color-select (car (gimp-image-get-layer-by-name img "small pixels (tmp)")) '(131 131 131) 1 CHANNEL-OP-ADD TRUE FALSE 0 FALSE)
			(gimp-edit-copy (car (gimp-image-get-layer-by-name img "area-brush extract (tmp)")))
			(set! floating-selection (car (gimp-edit-paste varDupLayer FALSE)))
			(gimp-floating-sel-anchor floating-selection)
			(gimp-layer-set-name varDupLayer "s12")
		)
		(gimp-image-set-active-layer img (car (gimp-image-get-layer-by-name img "s12")))
		(let* (
				(varDupLayer (car (gimp-layer-copy (car (gimp-image-get-active-layer img)) 1)))
			)
			(gimp-image-insert-layer img varDupLayer 0 -1)
			(gimp-selection-all img)
			(gimp-edit-clear varDupLayer)
			(gimp-selection-none img)
			(gimp-by-color-select (car (gimp-image-get-layer-by-name img "small pixels (tmp)")) '(128 128 128) 2 CHANNEL-OP-ADD TRUE FALSE 0 FALSE)
			(gimp-edit-copy (car (gimp-image-get-layer-by-name img "area-brush extract (tmp)")))
			(set! floating-selection (car (gimp-edit-paste varDupLayer FALSE)))
			(gimp-floating-sel-anchor floating-selection)
			(gimp-layer-set-name varDupLayer "s13")
		)
		(gimp-image-set-active-layer img (car (gimp-image-get-layer-by-name img "s13")))
		(let* (
				(varDupLayer (car (gimp-layer-copy (car (gimp-image-get-active-layer img)) 1)))
			)
			(gimp-image-insert-layer img varDupLayer 0 -1)
			(gimp-selection-all img)
			(gimp-edit-clear varDupLayer)
			(gimp-selection-none img)
			(gimp-by-color-select (car (gimp-image-get-layer-by-name img "small pixels (tmp)")) '(123 123 123) 2 CHANNEL-OP-ADD TRUE FALSE 0 FALSE)
			(gimp-edit-copy (car (gimp-image-get-layer-by-name img "area-brush extract (tmp)")))
			(set! floating-selection (car (gimp-edit-paste varDupLayer FALSE)))
			(gimp-floating-sel-anchor floating-selection)
			(gimp-layer-set-name varDupLayer "s14")
		)
		(gimp-image-set-active-layer img (car (gimp-image-get-layer-by-name img "s14")))
		(let* (
				(varDupLayer (car (gimp-layer-copy (car (gimp-image-get-active-layer img)) 1)))
			)
			(gimp-image-insert-layer img varDupLayer 0 -1)
			(gimp-selection-all img)
			(gimp-edit-clear varDupLayer)
			(gimp-selection-none img)
			(gimp-by-color-select (car (gimp-image-get-layer-by-name img "small pixels (tmp)")) '(98 98 98) 1 CHANNEL-OP-ADD TRUE FALSE 0 FALSE)
			(gimp-edit-copy (car (gimp-image-get-layer-by-name img "area-brush extract (tmp)")))
			(set! floating-selection (car (gimp-edit-paste varDupLayer FALSE)))
			(gimp-floating-sel-anchor floating-selection)
			(gimp-layer-set-name varDupLayer "s15")
		)
		(gimp-image-set-active-layer img (car (gimp-image-get-layer-by-name img "s15")))
		(let* (
				(varDupLayer (car (gimp-layer-copy (car (gimp-image-get-active-layer img)) 1)))
			)
			(gimp-image-insert-layer img varDupLayer 0 -1)
			(gimp-selection-all img)
			(gimp-edit-clear varDupLayer)
			(gimp-selection-none img)
			(gimp-by-color-select (car (gimp-image-get-layer-by-name img "small pixels (tmp)")) '(91 91 91) 2 CHANNEL-OP-ADD TRUE FALSE 0 FALSE)
			(gimp-edit-copy (car (gimp-image-get-layer-by-name img "area-brush extract (tmp)")))
			(set! floating-selection (car (gimp-edit-paste varDupLayer FALSE)))
			(gimp-floating-sel-anchor floating-selection)
			(gimp-layer-set-name varDupLayer "s16")
		)
		(gimp-image-set-active-layer img (car (gimp-image-get-layer-by-name img "s16")))
		(let* (
				(varDupLayer (car (gimp-layer-copy (car (gimp-image-get-active-layer img)) 1)))
			)
			(gimp-image-insert-layer img varDupLayer 0 -1)
			(gimp-selection-all img)
			(gimp-edit-clear varDupLayer)
			(gimp-selection-none img)
			(gimp-by-color-select (car (gimp-image-get-layer-by-name img "small pixels (tmp)")) '(86 86 86) 1 CHANNEL-OP-ADD TRUE FALSE 0 FALSE)
			(gimp-edit-copy (car (gimp-image-get-layer-by-name img "area-brush extract (tmp)")))
			(set! floating-selection (car (gimp-edit-paste varDupLayer FALSE)))
			(gimp-floating-sel-anchor floating-selection)
			(gimp-layer-set-name varDupLayer "s17")
		)
		(gimp-image-set-active-layer img (car (gimp-image-get-layer-by-name img "s17")))		
		(let* (
				(varDupLayer (car (gimp-layer-copy (car (gimp-image-get-active-layer img)) 1)))
			)
			(gimp-image-insert-layer img varDupLayer 0 -1)
			(gimp-selection-all img)
			(gimp-edit-clear varDupLayer)
			(gimp-selection-none img)
			(gimp-by-color-select (car (gimp-image-get-layer-by-name img "small pixels (tmp)")) '(80 80 80) 2 CHANNEL-OP-ADD TRUE FALSE 0 FALSE)
			(gimp-edit-copy (car (gimp-image-get-layer-by-name img "area-brush extract (tmp)")))
			(set! floating-selection (car (gimp-edit-paste varDupLayer FALSE)))
			(gimp-floating-sel-anchor floating-selection)
			(gimp-layer-set-name varDupLayer "s18")
		)
		(gimp-image-set-active-layer img (car (gimp-image-get-layer-by-name img "s18")))
		(let* (
				(varDupLayer (car (gimp-layer-copy (car (gimp-image-get-active-layer img)) 1)))
			)
			(gimp-image-insert-layer img varDupLayer 0 -1)
			(gimp-selection-all img)
			(gimp-edit-clear varDupLayer)
			(gimp-selection-none img)
			(gimp-by-color-select (car (gimp-image-get-layer-by-name img "small pixels (tmp)")) '(86 86 86) 2 CHANNEL-OP-ADD TRUE FALSE 0 FALSE)
			(gimp-edit-copy (car (gimp-image-get-layer-by-name img "area-brush extract (tmp)")))
			(set! floating-selection (car (gimp-edit-paste varDupLayer FALSE)))
			(gimp-floating-sel-anchor floating-selection)
			(gimp-layer-set-name varDupLayer "s19")
		)
		(gimp-image-set-active-layer img (car (gimp-image-get-layer-by-name img "s19")))
		(let* (
				(varDupLayer (car (gimp-layer-copy (car (gimp-image-get-active-layer img)) 1)))
			)
			(gimp-image-insert-layer img varDupLayer 0 -1)
			(gimp-selection-all img)
			(gimp-edit-clear varDupLayer)
			(gimp-selection-none img)
			(gimp-by-color-select (car (gimp-image-get-layer-by-name img "small pixels (tmp)")) '(31 31 31) 1 CHANNEL-OP-ADD TRUE FALSE 0 FALSE)
			(gimp-edit-copy (car (gimp-image-get-layer-by-name img "area-brush extract (tmp)")))
			(set! floating-selection (car (gimp-edit-paste varDupLayer FALSE)))
			(gimp-floating-sel-anchor floating-selection)
			(gimp-layer-set-name varDupLayer "s20")
		)
		(gimp-image-set-active-layer img (car (gimp-image-get-layer-by-name img "s20")))
		(let* (
				(varDupLayer (car (gimp-layer-copy (car (gimp-image-get-active-layer img)) 1)))
			)
			(gimp-image-insert-layer img varDupLayer 0 -1)
			(gimp-selection-all img)
			(gimp-edit-clear varDupLayer)
			(gimp-selection-none img)
			(gimp-by-color-select (car (gimp-image-get-layer-by-name img "small pixels (tmp)")) '(25 25 25) 2 CHANNEL-OP-ADD TRUE FALSE 0 FALSE)
			(gimp-edit-copy (car (gimp-image-get-layer-by-name img "area-brush extract (tmp)")))
			(set! floating-selection (car (gimp-edit-paste varDupLayer FALSE)))
			(gimp-floating-sel-anchor floating-selection)
			(gimp-layer-set-name varDupLayer "s21")
		)
		(gimp-image-set-active-layer img (car (gimp-image-get-layer-by-name img "s21")))
		(let* (
				(varDupLayer (car (gimp-layer-copy (car (gimp-image-get-active-layer img)) 1)))
			)
			(gimp-image-insert-layer img varDupLayer 0 -1)
			(gimp-selection-all img)
			(gimp-edit-clear varDupLayer)
			(gimp-selection-none img)
			(gimp-by-color-select (car (gimp-image-get-layer-by-name img "small pixels (tmp)")) '(8 8 8) 4 CHANNEL-OP-ADD TRUE FALSE 0 FALSE)
			(gimp-edit-copy (car (gimp-image-get-layer-by-name img "area-brush extract (tmp)")))
			(set! floating-selection (car (gimp-edit-paste varDupLayer FALSE)))
			(gimp-floating-sel-anchor floating-selection)
			(gimp-layer-set-name varDupLayer "s22")
		)
		(gimp-image-set-active-layer img (car (gimp-image-get-layer-by-name img "s22")))
		(let* (
				(varDupLayer (car (gimp-layer-copy (car (gimp-image-get-active-layer img)) 1)))
			)
			(gimp-image-insert-layer img varDupLayer 0 -1)
			(gimp-selection-all img)
			(gimp-edit-clear varDupLayer)
			(gimp-selection-none img)
			(gimp-by-color-select (car (gimp-image-get-layer-by-name img "small pixels (tmp)")) '(2 2 2) 1 CHANNEL-OP-ADD TRUE FALSE 0 FALSE)
			(gimp-edit-copy (car (gimp-image-get-layer-by-name img "area-brush extract (tmp)")))
			(set! floating-selection (car (gimp-edit-paste varDupLayer FALSE)))
			(gimp-floating-sel-anchor floating-selection)
			(gimp-layer-set-name varDupLayer "s23")
		)
		
		(gimp-context-set-feather 0)
		(gimp-selection-layer-alpha (car (gimp-image-get-layer-by-name img "area-brush")))
		(gimp-selection-invert img)
		(gimp-edit-clear (car (gimp-image-get-layer-by-name img "s1")))
		(gimp-edit-clear (car (gimp-image-get-layer-by-name img "s2")))
		(gimp-edit-clear (car (gimp-image-get-layer-by-name img "s3")))
		(gimp-edit-clear (car (gimp-image-get-layer-by-name img "s4")))
		(gimp-edit-clear (car (gimp-image-get-layer-by-name img "s5")))
		(gimp-edit-clear (car (gimp-image-get-layer-by-name img "s6")))
		(gimp-edit-clear (car (gimp-image-get-layer-by-name img "s7")))
		(gimp-edit-clear (car (gimp-image-get-layer-by-name img "s8")))
		(gimp-edit-clear (car (gimp-image-get-layer-by-name img "s9")))
		(gimp-edit-clear (car (gimp-image-get-layer-by-name img "s10")))
		(gimp-edit-clear (car (gimp-image-get-layer-by-name img "s11")))
		(gimp-edit-clear (car (gimp-image-get-layer-by-name img "s12")))
		(gimp-edit-clear (car (gimp-image-get-layer-by-name img "s13")))
		(gimp-edit-clear (car (gimp-image-get-layer-by-name img "s14")))
		(gimp-edit-clear (car (gimp-image-get-layer-by-name img "s15")))
		(gimp-edit-clear (car (gimp-image-get-layer-by-name img "s16")))
		(gimp-edit-clear (car (gimp-image-get-layer-by-name img "s17")))
		(gimp-edit-clear (car (gimp-image-get-layer-by-name img "s18")))
		(gimp-edit-clear (car (gimp-image-get-layer-by-name img "s19")))
		(gimp-edit-clear (car (gimp-image-get-layer-by-name img "s20")))
		(gimp-edit-clear (car (gimp-image-get-layer-by-name img "s21")))
		(gimp-edit-clear (car (gimp-image-get-layer-by-name img "s22")))
		(gimp-edit-clear (car (gimp-image-get-layer-by-name img "s23")))
		(gimp-selection-none img)
		;;		
		
		
		;;
		;; ************************************************************************************************************************************
		(gimp-context-set-feather 0)
		(gimp-by-color-select (car (gimp-image-get-layer-by-name img "medium pixels (tmp)")) '(230 230 230) 2 CHANNEL-OP-ADD TRUE FALSE 0 FALSE)
		(gimp-edit-copy (car (gimp-image-get-layer-by-name img "area-brush extract (tmp)")))		
		
		(gimp-image-set-active-layer img bg-layer)
		(gimp-image-insert-layer img pixel-group-medium 0 -1)
		(gimp-item-set-name pixel-group-medium "Pixels! medium parts")
		
		(gimp-image-insert-layer img medium-parts-layer pixel-group-medium 0)
		(set! floating-selection (car (gimp-edit-paste medium-parts-layer FALSE)))
		(gimp-floating-sel-anchor floating-selection)		
		
		(gimp-image-set-active-layer img (car (gimp-image-get-layer-by-name img "m1")))
		(let* (
				(varDupLayer (car (gimp-layer-copy (car (gimp-image-get-active-layer img)) 1)))
			)
			(gimp-image-insert-layer img varDupLayer 0 -1)
			(gimp-selection-all img)
			(gimp-edit-clear varDupLayer)
			(gimp-selection-none img)
			(gimp-by-color-select (car (gimp-image-get-layer-by-name img "medium pixels (tmp)")) '(236 236 236) 1 CHANNEL-OP-ADD TRUE FALSE 0 FALSE)
			(gimp-edit-copy (car (gimp-image-get-layer-by-name img "area-brush extract (tmp)")))
			(set! floating-selection (car (gimp-edit-paste varDupLayer FALSE)))
			(gimp-floating-sel-anchor floating-selection)
			(gimp-layer-set-name varDupLayer "m2")
		)
		(gimp-image-set-active-layer img (car (gimp-image-get-layer-by-name img "m2")))
		(let* (
				(varDupLayer (car (gimp-layer-copy (car (gimp-image-get-active-layer img)) 1)))
			)
			(gimp-image-insert-layer img varDupLayer 0 -1)
			(gimp-selection-all img)
			(gimp-edit-clear varDupLayer)
			(gimp-selection-none img)
			(gimp-by-color-select (car (gimp-image-get-layer-by-name img "medium pixels (tmp)")) '(250 250 250) 2 CHANNEL-OP-ADD TRUE FALSE 0 FALSE)
			(gimp-edit-copy (car (gimp-image-get-layer-by-name img "area-brush extract (tmp)")))
			(set! floating-selection (car (gimp-edit-paste varDupLayer FALSE)))
			(gimp-floating-sel-anchor floating-selection)
			(gimp-layer-set-name varDupLayer "m3")
		)
		(gimp-image-set-active-layer img (car (gimp-image-get-layer-by-name img "m3")))
		(let* (
				(varDupLayer (car (gimp-layer-copy (car (gimp-image-get-active-layer img)) 1)))
			)
			(gimp-image-insert-layer img varDupLayer 0 -1)
			(gimp-selection-all img)
			(gimp-edit-clear varDupLayer)
			(gimp-selection-none img)
			(gimp-by-color-select (car (gimp-image-get-layer-by-name img "medium pixels (tmp)")) '(210 210 210) 1 CHANNEL-OP-ADD TRUE FALSE 0 FALSE)
			(gimp-edit-copy (car (gimp-image-get-layer-by-name img "area-brush extract (tmp)")))
			(set! floating-selection (car (gimp-edit-paste varDupLayer FALSE)))
			(gimp-floating-sel-anchor floating-selection)
			(gimp-layer-set-name varDupLayer "m4")
		)
		(gimp-image-set-active-layer img (car (gimp-image-get-layer-by-name img "m4")))
		(let* (
				(varDupLayer (car (gimp-layer-copy (car (gimp-image-get-active-layer img)) 1)))
			)
			(gimp-image-insert-layer img varDupLayer 0 -1)
			(gimp-selection-all img)
			(gimp-edit-clear varDupLayer)
			(gimp-selection-none img)
			(gimp-by-color-select (car (gimp-image-get-layer-by-name img "medium pixels (tmp)")) '(202 202 202) 1 CHANNEL-OP-ADD TRUE FALSE 0 FALSE)
			(gimp-edit-copy (car (gimp-image-get-layer-by-name img "area-brush extract (tmp)")))
			(set! floating-selection (car (gimp-edit-paste varDupLayer FALSE)))
			(gimp-floating-sel-anchor floating-selection)
			(gimp-layer-set-name varDupLayer "m5")
		)
		(gimp-image-set-active-layer img (car (gimp-image-get-layer-by-name img "m5")))
		(let* (
				(varDupLayer (car (gimp-layer-copy (car (gimp-image-get-active-layer img)) 1)))
			)
			(gimp-image-insert-layer img varDupLayer 0 -1)
			(gimp-selection-all img)
			(gimp-edit-clear varDupLayer)
			(gimp-selection-none img)
			(gimp-by-color-select (car (gimp-image-get-layer-by-name img "medium pixels (tmp)")) '(205 205 205) 2 CHANNEL-OP-ADD TRUE FALSE 0 FALSE)
			(gimp-edit-copy (car (gimp-image-get-layer-by-name img "area-brush extract (tmp)")))
			(set! floating-selection (car (gimp-edit-paste varDupLayer FALSE)))
			(gimp-floating-sel-anchor floating-selection)
			(gimp-layer-set-name varDupLayer "m6")
		)
		(gimp-image-set-active-layer img (car (gimp-image-get-layer-by-name img "m6")))
		(let* (
				(varDupLayer (car (gimp-layer-copy (car (gimp-image-get-active-layer img)) 1)))
			)
			(gimp-image-insert-layer img varDupLayer 0 -1)
			(gimp-selection-all img)
			(gimp-edit-clear varDupLayer)
			(gimp-selection-none img)
			(gimp-by-color-select (car (gimp-image-get-layer-by-name img "medium pixels (tmp)")) '(190 190 190) 2 CHANNEL-OP-ADD TRUE FALSE 0 FALSE)
			(gimp-edit-copy (car (gimp-image-get-layer-by-name img "area-brush extract (tmp)")))
			(set! floating-selection (car (gimp-edit-paste varDupLayer FALSE)))
			(gimp-floating-sel-anchor floating-selection)
			(gimp-layer-set-name varDupLayer "m7")
		)
		(gimp-image-set-active-layer img (car (gimp-image-get-layer-by-name img "m7")))
		(let* (
				(varDupLayer (car (gimp-layer-copy (car (gimp-image-get-active-layer img)) 1)))
			)
			(gimp-image-insert-layer img varDupLayer 0 -1)
			(gimp-selection-all img)
			(gimp-edit-clear varDupLayer)
			(gimp-selection-none img)
			(gimp-by-color-select (car (gimp-image-get-layer-by-name img "medium pixels (tmp)")) '(177 177 177) 1 CHANNEL-OP-ADD TRUE FALSE 0 FALSE)
			(gimp-edit-copy (car (gimp-image-get-layer-by-name img "area-brush extract (tmp)")))
			(set! floating-selection (car (gimp-edit-paste varDupLayer FALSE)))
			(gimp-floating-sel-anchor floating-selection)
			(gimp-layer-set-name varDupLayer "m8")
		)
		(gimp-image-set-active-layer img (car (gimp-image-get-layer-by-name img "m8")))
		(let* (
				(varDupLayer (car (gimp-layer-copy (car (gimp-image-get-active-layer img)) 1)))
			)
			(gimp-image-insert-layer img varDupLayer 0 -1)
			(gimp-selection-all img)
			(gimp-edit-clear varDupLayer)
			(gimp-selection-none img)
			(gimp-by-color-select (car (gimp-image-get-layer-by-name img "medium pixels (tmp)")) '(160 160 160) 2 CHANNEL-OP-ADD TRUE FALSE 0 FALSE)
			(gimp-edit-copy (car (gimp-image-get-layer-by-name img "area-brush extract (tmp)")))
			(set! floating-selection (car (gimp-edit-paste varDupLayer FALSE)))
			(gimp-floating-sel-anchor floating-selection)
			(gimp-layer-set-name varDupLayer "m9")
		)
		(gimp-image-set-active-layer img (car (gimp-image-get-layer-by-name img "m9")))
		(let* (
				(varDupLayer (car (gimp-layer-copy (car (gimp-image-get-active-layer img)) 1)))
			)
			(gimp-image-insert-layer img varDupLayer 0 -1)
			(gimp-selection-all img)
			(gimp-edit-clear varDupLayer)
			(gimp-selection-none img)
			(gimp-by-color-select (car (gimp-image-get-layer-by-name img "medium pixels (tmp)")) '(139 139 139) 1 CHANNEL-OP-ADD TRUE FALSE 0 FALSE)
			(gimp-edit-copy (car (gimp-image-get-layer-by-name img "area-brush extract (tmp)")))
			(set! floating-selection (car (gimp-edit-paste varDupLayer FALSE)))
			(gimp-floating-sel-anchor floating-selection)
			(gimp-layer-set-name varDupLayer "m10")
		)
		(gimp-image-set-active-layer img (car (gimp-image-get-layer-by-name img "m10")))
		(let* (
				(varDupLayer (car (gimp-layer-copy (car (gimp-image-get-active-layer img)) 1)))
			)
			(gimp-image-insert-layer img varDupLayer 0 -1)
			(gimp-selection-all img)
			(gimp-edit-clear varDupLayer)
			(gimp-selection-none img)
			(gimp-by-color-select (car (gimp-image-get-layer-by-name img "medium pixels (tmp)")) '(121 121 121) 1 CHANNEL-OP-ADD TRUE FALSE 0 FALSE)
			(gimp-edit-copy (car (gimp-image-get-layer-by-name img "area-brush extract (tmp)")))
			(set! floating-selection (car (gimp-edit-paste varDupLayer FALSE)))
			(gimp-floating-sel-anchor floating-selection)
			(gimp-layer-set-name varDupLayer "m11")
		)
		(gimp-image-set-active-layer img (car (gimp-image-get-layer-by-name img "m11")))
		(let* (
				(varDupLayer (car (gimp-layer-copy (car (gimp-image-get-active-layer img)) 1)))
			)
			(gimp-image-insert-layer img varDupLayer 0 -1)
			(gimp-selection-all img)
			(gimp-edit-clear varDupLayer)
			(gimp-selection-none img)
			(gimp-by-color-select (car (gimp-image-get-layer-by-name img "medium pixels (tmp)")) '(119 119 119) 1 CHANNEL-OP-ADD TRUE FALSE 0 FALSE)
			(gimp-edit-copy (car (gimp-image-get-layer-by-name img "area-brush extract (tmp)")))
			(set! floating-selection (car (gimp-edit-paste varDupLayer FALSE)))
			(gimp-floating-sel-anchor floating-selection)
			(gimp-layer-set-name varDupLayer "m12")
		)
		(gimp-image-set-active-layer img (car (gimp-image-get-layer-by-name img "m12")))
		(let* (
				(varDupLayer (car (gimp-layer-copy (car (gimp-image-get-active-layer img)) 1)))
			)
			(gimp-image-insert-layer img varDupLayer 0 -1)
			(gimp-selection-all img)
			(gimp-edit-clear varDupLayer)
			(gimp-selection-none img)
			(gimp-by-color-select (car (gimp-image-get-layer-by-name img "medium pixels (tmp)")) '(115 115 115) 2 CHANNEL-OP-ADD TRUE FALSE 0 FALSE)
			(gimp-edit-copy (car (gimp-image-get-layer-by-name img "area-brush extract (tmp)")))
			(set! floating-selection (car (gimp-edit-paste varDupLayer FALSE)))
			(gimp-floating-sel-anchor floating-selection)
			(gimp-layer-set-name varDupLayer "m13")
		)
		(gimp-image-set-active-layer img (car (gimp-image-get-layer-by-name img "m13")))
		(let* (
				(varDupLayer (car (gimp-layer-copy (car (gimp-image-get-active-layer img)) 1)))
			)
			(gimp-image-insert-layer img varDupLayer 0 -1)
			(gimp-selection-all img)
			(gimp-edit-clear varDupLayer)
			(gimp-selection-none img)
			(gimp-by-color-select (car (gimp-image-get-layer-by-name img "medium pixels (tmp)")) '(111 111 111) 1 CHANNEL-OP-ADD TRUE FALSE 0 FALSE)
			(gimp-edit-copy (car (gimp-image-get-layer-by-name img "area-brush extract (tmp)")))
			(set! floating-selection (car (gimp-edit-paste varDupLayer FALSE)))
			(gimp-floating-sel-anchor floating-selection)
			(gimp-layer-set-name varDupLayer "m14")
		)
		(gimp-image-set-active-layer img (car (gimp-image-get-layer-by-name img "m14")))
		(let* (
				(varDupLayer (car (gimp-layer-copy (car (gimp-image-get-active-layer img)) 1)))
			)
			(gimp-image-insert-layer img varDupLayer 0 -1)
			(gimp-selection-all img)
			(gimp-edit-clear varDupLayer)
			(gimp-selection-none img)
			(gimp-by-color-select (car (gimp-image-get-layer-by-name img "medium pixels (tmp)")) '(107 107 107) 1 CHANNEL-OP-ADD TRUE FALSE 0 FALSE)
			(gimp-edit-copy (car (gimp-image-get-layer-by-name img "area-brush extract (tmp)")))
			(set! floating-selection (car (gimp-edit-paste varDupLayer FALSE)))
			(gimp-floating-sel-anchor floating-selection)
			(gimp-layer-set-name varDupLayer "m15")
		)
		(gimp-image-set-active-layer img (car (gimp-image-get-layer-by-name img "m15")))
		(let* (
				(varDupLayer (car (gimp-layer-copy (car (gimp-image-get-active-layer img)) 1)))
			)
			(gimp-image-insert-layer img varDupLayer 0 -1)
			(gimp-selection-all img)
			(gimp-edit-clear varDupLayer)
			(gimp-selection-none img)
			(gimp-by-color-select (car (gimp-image-get-layer-by-name img "medium pixels (tmp)")) '(104 104 104) 2 CHANNEL-OP-ADD TRUE FALSE 0 FALSE)
			(gimp-edit-copy (car (gimp-image-get-layer-by-name img "area-brush extract (tmp)")))
			(set! floating-selection (car (gimp-edit-paste varDupLayer FALSE)))
			(gimp-floating-sel-anchor floating-selection)
			(gimp-layer-set-name varDupLayer "m16")
		)
		(gimp-image-set-active-layer img (car (gimp-image-get-layer-by-name img "m16")))
		(let* (
				(varDupLayer (car (gimp-layer-copy (car (gimp-image-get-active-layer img)) 1)))
			)
			(gimp-image-insert-layer img varDupLayer 0 -1)
			(gimp-selection-all img)
			(gimp-edit-clear varDupLayer)
			(gimp-selection-none img)
			(gimp-by-color-select (car (gimp-image-get-layer-by-name img "medium pixels (tmp)")) '(99 99 99) 1 CHANNEL-OP-ADD TRUE FALSE 0 FALSE)
			(gimp-edit-copy (car (gimp-image-get-layer-by-name img "area-brush extract (tmp)")))
			(set! floating-selection (car (gimp-edit-paste varDupLayer FALSE)))
			(gimp-floating-sel-anchor floating-selection)
			(gimp-layer-set-name varDupLayer "m17")
		)
		(gimp-image-set-active-layer img (car (gimp-image-get-layer-by-name img "m17")))
		(let* (
				(varDupLayer (car (gimp-layer-copy (car (gimp-image-get-active-layer img)) 1)))
			)
			(gimp-image-insert-layer img varDupLayer 0 -1)
			(gimp-selection-all img)
			(gimp-edit-clear varDupLayer)
			(gimp-selection-none img)
			(gimp-by-color-select (car (gimp-image-get-layer-by-name img "medium pixels (tmp)")) '(91 91 91) 1 CHANNEL-OP-ADD TRUE FALSE 0 FALSE)
			(gimp-edit-copy (car (gimp-image-get-layer-by-name img "area-brush extract (tmp)")))
			(set! floating-selection (car (gimp-edit-paste varDupLayer FALSE)))
			(gimp-floating-sel-anchor floating-selection)
			(gimp-layer-set-name varDupLayer "m18")
		)
		(gimp-image-set-active-layer img (car (gimp-image-get-layer-by-name img "m18")))
		(let* (
				(varDupLayer (car (gimp-layer-copy (car (gimp-image-get-active-layer img)) 1)))
			)
			(gimp-image-insert-layer img varDupLayer 0 -1)
			(gimp-selection-all img)
			(gimp-edit-clear varDupLayer)
			(gimp-selection-none img)
			(gimp-by-color-select (car (gimp-image-get-layer-by-name img "medium pixels (tmp)")) '(71 71 71) 1 CHANNEL-OP-ADD TRUE FALSE 0 FALSE)
			(gimp-edit-copy (car (gimp-image-get-layer-by-name img "area-brush extract (tmp)")))
			(set! floating-selection (car (gimp-edit-paste varDupLayer FALSE)))
			(gimp-floating-sel-anchor floating-selection)
			(gimp-layer-set-name varDupLayer "m19")
		)
		(gimp-image-set-active-layer img (car (gimp-image-get-layer-by-name img "m19")))
		(let* (
				(varDupLayer (car (gimp-layer-copy (car (gimp-image-get-active-layer img)) 1)))
			)
			(gimp-image-insert-layer img varDupLayer 0 -1)
			(gimp-selection-all img)
			(gimp-edit-clear varDupLayer)
			(gimp-selection-none img)
			(gimp-by-color-select (car (gimp-image-get-layer-by-name img "medium pixels (tmp)")) '(39 39 39) 1 CHANNEL-OP-ADD TRUE FALSE 0 FALSE)
			(gimp-edit-copy (car (gimp-image-get-layer-by-name img "area-brush extract (tmp)")))
			(set! floating-selection (car (gimp-edit-paste varDupLayer FALSE)))
			(gimp-floating-sel-anchor floating-selection)
			(gimp-layer-set-name varDupLayer "m20")
		)
		(gimp-image-set-active-layer img (car (gimp-image-get-layer-by-name img "m20")))
		(let* (
				(varDupLayer (car (gimp-layer-copy (car (gimp-image-get-active-layer img)) 1)))
			)
			(gimp-image-insert-layer img varDupLayer 0 -1)
			(gimp-selection-all img)
			(gimp-edit-clear varDupLayer)
			(gimp-selection-none img)
			(gimp-by-color-select (car (gimp-image-get-layer-by-name img "medium pixels (tmp)")) '(35 35 35) 2 CHANNEL-OP-ADD TRUE FALSE 0 FALSE)
			(gimp-edit-copy (car (gimp-image-get-layer-by-name img "area-brush extract (tmp)")))
			(set! floating-selection (car (gimp-edit-paste varDupLayer FALSE)))
			(gimp-floating-sel-anchor floating-selection)
			(gimp-layer-set-name varDupLayer "m21")
		)
		(gimp-image-set-active-layer img (car (gimp-image-get-layer-by-name img "m21")))
		(let* (
				(varDupLayer (car (gimp-layer-copy (car (gimp-image-get-active-layer img)) 1)))
			)
			(gimp-image-insert-layer img varDupLayer 0 -1)
			(gimp-selection-all img)
			(gimp-edit-clear varDupLayer)
			(gimp-selection-none img)
			(gimp-by-color-select (car (gimp-image-get-layer-by-name img "medium pixels (tmp)")) '(13 13 13) 4 CHANNEL-OP-ADD TRUE FALSE 0 FALSE)
			(gimp-edit-copy (car (gimp-image-get-layer-by-name img "area-brush extract (tmp)")))
			(set! floating-selection (car (gimp-edit-paste varDupLayer FALSE)))
			(gimp-floating-sel-anchor floating-selection)
			(gimp-layer-set-name varDupLayer "m22")
		)
		
		(gimp-context-set-feather 0)
		(gimp-selection-layer-alpha (car (gimp-image-get-layer-by-name img "area-brush")))
		(gimp-selection-invert img)
		(gimp-edit-clear (car (gimp-image-get-layer-by-name img "m1")))
		(gimp-edit-clear (car (gimp-image-get-layer-by-name img "m2")))
		(gimp-edit-clear (car (gimp-image-get-layer-by-name img "m3")))
		(gimp-edit-clear (car (gimp-image-get-layer-by-name img "m4")))
		(gimp-edit-clear (car (gimp-image-get-layer-by-name img "m5")))
		(gimp-edit-clear (car (gimp-image-get-layer-by-name img "m6")))
		(gimp-edit-clear (car (gimp-image-get-layer-by-name img "m7")))
		(gimp-edit-clear (car (gimp-image-get-layer-by-name img "m8")))
		(gimp-edit-clear (car (gimp-image-get-layer-by-name img "m9")))
		(gimp-edit-clear (car (gimp-image-get-layer-by-name img "m10")))
		(gimp-edit-clear (car (gimp-image-get-layer-by-name img "m11")))
		(gimp-edit-clear (car (gimp-image-get-layer-by-name img "m12")))
		(gimp-edit-clear (car (gimp-image-get-layer-by-name img "m13")))
		(gimp-edit-clear (car (gimp-image-get-layer-by-name img "m14")))
		(gimp-edit-clear (car (gimp-image-get-layer-by-name img "m15")))
		(gimp-edit-clear (car (gimp-image-get-layer-by-name img "m16")))
		(gimp-edit-clear (car (gimp-image-get-layer-by-name img "m17")))
		(gimp-edit-clear (car (gimp-image-get-layer-by-name img "m18")))
		(gimp-edit-clear (car (gimp-image-get-layer-by-name img "m19")))
		(gimp-edit-clear (car (gimp-image-get-layer-by-name img "m20")))
		(gimp-edit-clear (car (gimp-image-get-layer-by-name img "m21")))
		(gimp-edit-clear (car (gimp-image-get-layer-by-name img "m22")))
		(gimp-selection-none img)
		;;		
		

		;;
		;; ************************************************************************************************************************************
		(gimp-context-set-feather 0)
		(gimp-by-color-select (car (gimp-image-get-layer-by-name img "large pixels (tmp)")) '(255 255 255) 4 CHANNEL-OP-ADD TRUE FALSE 0 FALSE)
		(gimp-edit-copy (car (gimp-image-get-layer-by-name img "area-brush extract (tmp)")))		
		
		(gimp-image-set-active-layer img bg-layer)
		(gimp-image-insert-layer img pixel-group-large 0 -1)
		(gimp-item-set-name pixel-group-large "Pixels! large parts")
		
		(gimp-image-insert-layer img large-parts-layer pixel-group-large 0)
		(set! floating-selection (car (gimp-edit-paste large-parts-layer FALSE)))
		(gimp-floating-sel-anchor floating-selection)		
		
		(gimp-image-set-active-layer img (car (gimp-image-get-layer-by-name img "l1")))
		(let* (
				(varDupLayer (car (gimp-layer-copy (car (gimp-image-get-active-layer img)) 1)))
			)
			(gimp-image-insert-layer img varDupLayer 0 -1)
			(gimp-selection-all img)
			(gimp-edit-clear varDupLayer)
			(gimp-selection-none img)
			(gimp-by-color-select (car (gimp-image-get-layer-by-name img "large pixels (tmp)")) '(188 188 188) 1 CHANNEL-OP-ADD TRUE FALSE 0 FALSE)
			(gimp-edit-copy (car (gimp-image-get-layer-by-name img "area-brush extract (tmp)")))
			(set! floating-selection (car (gimp-edit-paste varDupLayer FALSE)))
			(gimp-floating-sel-anchor floating-selection)
			(gimp-layer-set-name varDupLayer "l2")
		)
		(gimp-image-set-active-layer img (car (gimp-image-get-layer-by-name img "l2")))
		(let* (
				(varDupLayer (car (gimp-layer-copy (car (gimp-image-get-active-layer img)) 1)))
			)
			(gimp-image-insert-layer img varDupLayer 0 -1)
			(gimp-selection-all img)
			(gimp-edit-clear varDupLayer)
			(gimp-selection-none img)
			(gimp-by-color-select (car (gimp-image-get-layer-by-name img "large pixels (tmp)")) '(184 184 184) 1 CHANNEL-OP-ADD TRUE FALSE 0 FALSE)
			(gimp-edit-copy (car (gimp-image-get-layer-by-name img "area-brush extract (tmp)")))
			(set! floating-selection (car (gimp-edit-paste varDupLayer FALSE)))
			(gimp-floating-sel-anchor floating-selection)
			(gimp-layer-set-name varDupLayer "l3")
		)
		(gimp-image-set-active-layer img (car (gimp-image-get-layer-by-name img "l3")))
		(let* (
				(varDupLayer (car (gimp-layer-copy (car (gimp-image-get-active-layer img)) 1)))
			)
			(gimp-image-insert-layer img varDupLayer 0 -1)
			(gimp-selection-all img)
			(gimp-edit-clear varDupLayer)
			(gimp-selection-none img)
			(gimp-by-color-select (car (gimp-image-get-layer-by-name img "large pixels (tmp)")) '(181 181 181) 1 CHANNEL-OP-ADD TRUE FALSE 0 FALSE)
			(gimp-edit-copy (car (gimp-image-get-layer-by-name img "area-brush extract (tmp)")))
			(set! floating-selection (car (gimp-edit-paste varDupLayer FALSE)))
			(gimp-floating-sel-anchor floating-selection)
			(gimp-layer-set-name varDupLayer "l4")
		)
		(gimp-image-set-active-layer img (car (gimp-image-get-layer-by-name img "l4")))			
		(let* (
				(varDupLayer (car (gimp-layer-copy (car (gimp-image-get-active-layer img)) 1)))
			)
			(gimp-image-insert-layer img varDupLayer 0 -1)
			(gimp-selection-all img)
			(gimp-edit-clear varDupLayer)
			(gimp-selection-none img)
			(gimp-by-color-select (car (gimp-image-get-layer-by-name img "large pixels (tmp)")) '(171 171 171) 2 CHANNEL-OP-ADD TRUE FALSE 0 FALSE)
			(gimp-edit-copy (car (gimp-image-get-layer-by-name img "area-brush extract (tmp)")))
			(set! floating-selection (car (gimp-edit-paste varDupLayer FALSE)))
			(gimp-floating-sel-anchor floating-selection)
			(gimp-layer-set-name varDupLayer "l5")
		)
		(gimp-image-set-active-layer img (car (gimp-image-get-layer-by-name img "l5")))	
		(let* (
				(varDupLayer (car (gimp-layer-copy (car (gimp-image-get-active-layer img)) 1)))
			)
			(gimp-image-insert-layer img varDupLayer 0 -1)
			(gimp-selection-all img)
			(gimp-edit-clear varDupLayer)
			(gimp-selection-none img)
			(gimp-by-color-select (car (gimp-image-get-layer-by-name img "large pixels (tmp)")) '(163 163 163) 2 CHANNEL-OP-ADD TRUE FALSE 0 FALSE)
			(gimp-edit-copy (car (gimp-image-get-layer-by-name img "area-brush extract (tmp)")))
			(set! floating-selection (car (gimp-edit-paste varDupLayer FALSE)))
			(gimp-floating-sel-anchor floating-selection)
			(gimp-layer-set-name varDupLayer "l6")
		)
		(gimp-image-set-active-layer img (car (gimp-image-get-layer-by-name img "l6")))
		(let* (
				(varDupLayer (car (gimp-layer-copy (car (gimp-image-get-active-layer img)) 1)))
			)
			(gimp-image-insert-layer img varDupLayer 0 -1)
			(gimp-selection-all img)
			(gimp-edit-clear varDupLayer)
			(gimp-selection-none img)
			(gimp-by-color-select (car (gimp-image-get-layer-by-name img "large pixels (tmp)")) '(160 160 160) 1 CHANNEL-OP-ADD TRUE FALSE 0 FALSE)
			(gimp-edit-copy (car (gimp-image-get-layer-by-name img "area-brush extract (tmp)")))
			(set! floating-selection (car (gimp-edit-paste varDupLayer FALSE)))
			(gimp-floating-sel-anchor floating-selection)
			(gimp-layer-set-name varDupLayer "l7")
		)
		(gimp-image-set-active-layer img (car (gimp-image-get-layer-by-name img "l7")))	
		(let* (
				(varDupLayer (car (gimp-layer-copy (car (gimp-image-get-active-layer img)) 1)))
			)
			(gimp-image-insert-layer img varDupLayer 0 -1)
			(gimp-selection-all img)
			(gimp-edit-clear varDupLayer)
			(gimp-selection-none img)
			(gimp-by-color-select (car (gimp-image-get-layer-by-name img "large pixels (tmp)")) '(157 157 157) 1 CHANNEL-OP-ADD TRUE FALSE 0 FALSE)
			(gimp-edit-copy (car (gimp-image-get-layer-by-name img "area-brush extract (tmp)")))
			(set! floating-selection (car (gimp-edit-paste varDupLayer FALSE)))
			(gimp-floating-sel-anchor floating-selection)
			(gimp-layer-set-name varDupLayer "l8")
		)
		(gimp-image-set-active-layer img (car (gimp-image-get-layer-by-name img "l8")))
		(let* (
				(varDupLayer (car (gimp-layer-copy (car (gimp-image-get-active-layer img)) 1)))
			)
			(gimp-image-insert-layer img varDupLayer 0 -1)
			(gimp-selection-all img)
			(gimp-edit-clear varDupLayer)
			(gimp-selection-none img)
			(gimp-by-color-select (car (gimp-image-get-layer-by-name img "large pixels (tmp)")) '(154 154 154) 2 CHANNEL-OP-ADD TRUE FALSE 0 FALSE)
			(gimp-edit-copy (car (gimp-image-get-layer-by-name img "area-brush extract (tmp)")))
			(set! floating-selection (car (gimp-edit-paste varDupLayer FALSE)))
			(gimp-floating-sel-anchor floating-selection)
			(gimp-layer-set-name varDupLayer "l9")
		)
		(gimp-image-set-active-layer img (car (gimp-image-get-layer-by-name img "l9")))		
		(let* (
				(varDupLayer (car (gimp-layer-copy (car (gimp-image-get-active-layer img)) 1)))
			)
			(gimp-image-insert-layer img varDupLayer 0 -1)
			(gimp-selection-all img)
			(gimp-edit-clear varDupLayer)
			(gimp-selection-none img)
			(gimp-by-color-select (car (gimp-image-get-layer-by-name img "large pixels (tmp)")) '(151 151 151) 1 CHANNEL-OP-ADD TRUE FALSE 0 FALSE)
			(gimp-edit-copy (car (gimp-image-get-layer-by-name img "area-brush extract (tmp)")))
			(set! floating-selection (car (gimp-edit-paste varDupLayer FALSE)))
			(gimp-floating-sel-anchor floating-selection)
			(gimp-layer-set-name varDupLayer "l10")
		)
		(gimp-image-set-active-layer img (car (gimp-image-get-layer-by-name img "l10")))		
		(let* (
				(varDupLayer (car (gimp-layer-copy (car (gimp-image-get-active-layer img)) 1)))
			)
			(gimp-image-insert-layer img varDupLayer 0 -1)
			(gimp-selection-all img)
			(gimp-edit-clear varDupLayer)
			(gimp-selection-none img)
			(gimp-by-color-select (car (gimp-image-get-layer-by-name img "large pixels (tmp)")) '(145 145 145) 2 CHANNEL-OP-ADD TRUE FALSE 0 FALSE)
			(gimp-edit-copy (car (gimp-image-get-layer-by-name img "area-brush extract (tmp)")))
			(set! floating-selection (car (gimp-edit-paste varDupLayer FALSE)))
			(gimp-floating-sel-anchor floating-selection)
			(gimp-layer-set-name varDupLayer "l11")
		)
		(gimp-image-set-active-layer img (car (gimp-image-get-layer-by-name img "l11")))
		(let* (
				(varDupLayer (car (gimp-layer-copy (car (gimp-image-get-active-layer img)) 1)))
			)
			(gimp-image-insert-layer img varDupLayer 0 -1)
			(gimp-selection-all img)
			(gimp-edit-clear varDupLayer)
			(gimp-selection-none img)
			(gimp-by-color-select (car (gimp-image-get-layer-by-name img "large pixels (tmp)")) '(140 140 140) 2 CHANNEL-OP-ADD TRUE FALSE 0 FALSE)
			(gimp-edit-copy (car (gimp-image-get-layer-by-name img "area-brush extract (tmp)")))
			(set! floating-selection (car (gimp-edit-paste varDupLayer FALSE)))
			(gimp-floating-sel-anchor floating-selection)
			(gimp-layer-set-name varDupLayer "l12")
		)
		(gimp-image-set-active-layer img (car (gimp-image-get-layer-by-name img "l12")))
		(let* (
				(varDupLayer (car (gimp-layer-copy (car (gimp-image-get-active-layer img)) 1)))
			)
			(gimp-image-insert-layer img varDupLayer 0 -1)
			(gimp-selection-all img)
			(gimp-edit-clear varDupLayer)
			(gimp-selection-none img)
			(gimp-by-color-select (car (gimp-image-get-layer-by-name img "large pixels (tmp)")) '(118 118 118) 1 CHANNEL-OP-ADD TRUE FALSE 0 FALSE)
			(gimp-edit-copy (car (gimp-image-get-layer-by-name img "area-brush extract (tmp)")))
			(set! floating-selection (car (gimp-edit-paste varDupLayer FALSE)))
			(gimp-floating-sel-anchor floating-selection)
			(gimp-layer-set-name varDupLayer "l13")
		)
		(gimp-image-set-active-layer img (car (gimp-image-get-layer-by-name img "l13")))
		(let* (
				(varDupLayer (car (gimp-layer-copy (car (gimp-image-get-active-layer img)) 1)))
			)
			(gimp-image-insert-layer img varDupLayer 0 -1)
			(gimp-selection-all img)
			(gimp-edit-clear varDupLayer)
			(gimp-selection-none img)
			(gimp-by-color-select (car (gimp-image-get-layer-by-name img "large pixels (tmp)")) '(74 74 74) 1 CHANNEL-OP-ADD TRUE FALSE 0 FALSE)
			(gimp-edit-copy (car (gimp-image-get-layer-by-name img "area-brush extract (tmp)")))
			(set! floating-selection (car (gimp-edit-paste varDupLayer FALSE)))
			(gimp-floating-sel-anchor floating-selection)
			(gimp-layer-set-name varDupLayer "l14")
		)
		(gimp-image-set-active-layer img (car (gimp-image-get-layer-by-name img "l14")))
		(let* (
				(varDupLayer (car (gimp-layer-copy (car (gimp-image-get-active-layer img)) 1)))
			)
			(gimp-image-insert-layer img varDupLayer 0 -1)
			(gimp-selection-all img)
			(gimp-edit-clear varDupLayer)
			(gimp-selection-none img)
			(gimp-by-color-select (car (gimp-image-get-layer-by-name img "large pixels (tmp)")) '(63 63 63) 4 CHANNEL-OP-ADD TRUE FALSE 0 FALSE)
			(gimp-edit-copy (car (gimp-image-get-layer-by-name img "area-brush extract (tmp)")))
			(set! floating-selection (car (gimp-edit-paste varDupLayer FALSE)))
			(gimp-floating-sel-anchor floating-selection)
			(gimp-layer-set-name varDupLayer "l15")
		)
		(gimp-image-set-active-layer img (car (gimp-image-get-layer-by-name img "l15")))
		(let* (
				(varDupLayer (car (gimp-layer-copy (car (gimp-image-get-active-layer img)) 1)))
			)
			(gimp-image-insert-layer img varDupLayer 0 -1)
			(gimp-selection-all img)
			(gimp-edit-clear varDupLayer)
			(gimp-selection-none img)
			(gimp-by-color-select (car (gimp-image-get-layer-by-name img "large pixels (tmp)")) '(50 50 50) 1 CHANNEL-OP-ADD TRUE FALSE 0 FALSE)
			(gimp-edit-copy (car (gimp-image-get-layer-by-name img "area-brush extract (tmp)")))
			(set! floating-selection (car (gimp-edit-paste varDupLayer FALSE)))
			(gimp-floating-sel-anchor floating-selection)
			(gimp-layer-set-name varDupLayer "l16")
		)
		(gimp-image-set-active-layer img (car (gimp-image-get-layer-by-name img "l16")))
		(let* (
				(varDupLayer (car (gimp-layer-copy (car (gimp-image-get-active-layer img)) 1)))
			)
			(gimp-image-insert-layer img varDupLayer 0 -1)
			(gimp-selection-all img)
			(gimp-edit-clear varDupLayer)
			(gimp-selection-none img)
			(gimp-by-color-select (car (gimp-image-get-layer-by-name img "large pixels (tmp)")) '(55 55 55) 2 CHANNEL-OP-ADD TRUE FALSE 0 FALSE)
			(gimp-edit-copy (car (gimp-image-get-layer-by-name img "area-brush extract (tmp)")))
			(set! floating-selection (car (gimp-edit-paste varDupLayer FALSE)))
			(gimp-floating-sel-anchor floating-selection)
			(gimp-layer-set-name varDupLayer "l17")
		)
		(gimp-image-set-active-layer img (car (gimp-image-get-layer-by-name img "l17")))
		(let* (
				(varDupLayer (car (gimp-layer-copy (car (gimp-image-get-active-layer img)) 1)))
			)
			(gimp-image-insert-layer img varDupLayer 0 -1)
			(gimp-selection-all img)
			(gimp-edit-clear varDupLayer)
			(gimp-selection-none img)
			(gimp-by-color-select (car (gimp-image-get-layer-by-name img "large pixels (tmp)")) '(43 43 43) 2 CHANNEL-OP-ADD TRUE FALSE 0 FALSE)
			(gimp-edit-copy (car (gimp-image-get-layer-by-name img "area-brush extract (tmp)")))
			(set! floating-selection (car (gimp-edit-paste varDupLayer FALSE)))
			(gimp-floating-sel-anchor floating-selection)
			(gimp-layer-set-name varDupLayer "l18")
		)	
		
		(gimp-context-set-feather 0)
		(gimp-selection-layer-alpha (car (gimp-image-get-layer-by-name img "area-brush")))
		(gimp-selection-invert img)
		(gimp-edit-clear (car (gimp-image-get-layer-by-name img "l1")))
		(gimp-edit-clear (car (gimp-image-get-layer-by-name img "l2")))
		(gimp-edit-clear (car (gimp-image-get-layer-by-name img "l3")))
		(gimp-edit-clear (car (gimp-image-get-layer-by-name img "l4")))
		(gimp-edit-clear (car (gimp-image-get-layer-by-name img "l5")))
		(gimp-edit-clear (car (gimp-image-get-layer-by-name img "l6")))
		(gimp-edit-clear (car (gimp-image-get-layer-by-name img "l7")))
		(gimp-edit-clear (car (gimp-image-get-layer-by-name img "l8")))
		(gimp-edit-clear (car (gimp-image-get-layer-by-name img "l9")))
		(gimp-edit-clear (car (gimp-image-get-layer-by-name img "l10")))
		(gimp-edit-clear (car (gimp-image-get-layer-by-name img "l11")))
		(gimp-edit-clear (car (gimp-image-get-layer-by-name img "l12")))
		(gimp-edit-clear (car (gimp-image-get-layer-by-name img "l13")))
		(gimp-edit-clear (car (gimp-image-get-layer-by-name img "l14")))
		(gimp-edit-clear (car (gimp-image-get-layer-by-name img "l15")))
		(gimp-edit-clear (car (gimp-image-get-layer-by-name img "l16")))
		(gimp-edit-clear (car (gimp-image-get-layer-by-name img "l17")))
		(gimp-edit-clear (car (gimp-image-get-layer-by-name img "l18")))
		(gimp-selection-none img)
		;;	
		
		
		;;
		;; ************************************************************************************************************************************
		(gimp-context-set-feather 0)
		(gimp-by-color-select (car (gimp-image-get-layer-by-name img "very large pixels (tmp)")) '(240 240 240) 2 CHANNEL-OP-ADD TRUE FALSE 0 FALSE)
		(gimp-edit-copy (car (gimp-image-get-layer-by-name img "area-brush extract (tmp)")))		
		
		(gimp-image-set-active-layer img bg-layer)
		(gimp-image-insert-layer img pixel-group-very-large 0 -1)
		(gimp-item-set-name pixel-group-very-large "Pixels! very large parts")
		
		(gimp-image-insert-layer img very-large-parts-layer pixel-group-very-large 0)
		(set! floating-selection (car (gimp-edit-paste very-large-parts-layer FALSE)))
		(gimp-floating-sel-anchor floating-selection)		
		
		(gimp-image-set-active-layer img (car (gimp-image-get-layer-by-name img "vl1")))
		(let* (
				(varDupLayer (car (gimp-layer-copy (car (gimp-image-get-active-layer img)) 1)))
			)
			(gimp-image-insert-layer img varDupLayer 0 -1)
			(gimp-selection-all img)
			(gimp-edit-clear varDupLayer)
			(gimp-selection-none img)
			(gimp-by-color-select (car (gimp-image-get-layer-by-name img "very large pixels (tmp)")) '(232 232 232) 2 CHANNEL-OP-ADD TRUE FALSE 0 FALSE)
			(gimp-edit-copy (car (gimp-image-get-layer-by-name img "area-brush extract (tmp)")))
			(set! floating-selection (car (gimp-edit-paste varDupLayer FALSE)))
			(gimp-floating-sel-anchor floating-selection)
			(gimp-layer-set-name varDupLayer "vl2")
		)
		(gimp-image-set-active-layer img (car (gimp-image-get-layer-by-name img "vl2")))
		(let* (
				(varDupLayer (car (gimp-layer-copy (car (gimp-image-get-active-layer img)) 1)))
			)
			(gimp-image-insert-layer img varDupLayer 0 -1)
			(gimp-selection-all img)
			(gimp-edit-clear varDupLayer)
			(gimp-selection-none img)
			(gimp-by-color-select (car (gimp-image-get-layer-by-name img "very large pixels (tmp)")) '(178 178 178) 1 CHANNEL-OP-ADD TRUE FALSE 0 FALSE)
			(gimp-edit-copy (car (gimp-image-get-layer-by-name img "area-brush extract (tmp)")))
			(set! floating-selection (car (gimp-edit-paste varDupLayer FALSE)))
			(gimp-floating-sel-anchor floating-selection)
			(gimp-layer-set-name varDupLayer "vl3")
		)
		(gimp-image-set-active-layer img (car (gimp-image-get-layer-by-name img "vl3")))
		(let* (
				(varDupLayer (car (gimp-layer-copy (car (gimp-image-get-active-layer img)) 1)))
			)
			(gimp-image-insert-layer img varDupLayer 0 -1)
			(gimp-selection-all img)
			(gimp-edit-clear varDupLayer)
			(gimp-selection-none img)
			(gimp-by-color-select (car (gimp-image-get-layer-by-name img "very large pixels (tmp)")) '(155 155 155) 2 CHANNEL-OP-ADD TRUE FALSE 0 FALSE)
			(gimp-edit-copy (car (gimp-image-get-layer-by-name img "area-brush extract (tmp)")))
			(set! floating-selection (car (gimp-edit-paste varDupLayer FALSE)))
			(gimp-floating-sel-anchor floating-selection)
			(gimp-layer-set-name varDupLayer "vl4")
		)
		(gimp-image-set-active-layer img (car (gimp-image-get-layer-by-name img "vl4")))
		(let* (
				(varDupLayer (car (gimp-layer-copy (car (gimp-image-get-active-layer img)) 1)))
			)
			(gimp-image-insert-layer img varDupLayer 0 -1)
			(gimp-selection-all img)
			(gimp-edit-clear varDupLayer)
			(gimp-selection-none img)
			(gimp-by-color-select (car (gimp-image-get-layer-by-name img "very large pixels (tmp)")) '(150 150 150) 2 CHANNEL-OP-ADD TRUE FALSE 0 FALSE)
			(gimp-edit-copy (car (gimp-image-get-layer-by-name img "area-brush extract (tmp)")))
			(set! floating-selection (car (gimp-edit-paste varDupLayer FALSE)))
			(gimp-floating-sel-anchor floating-selection)
			(gimp-layer-set-name varDupLayer "vl5")
		)
		(gimp-image-set-active-layer img (car (gimp-image-get-layer-by-name img "vl5")))
		(let* (
				(varDupLayer (car (gimp-layer-copy (car (gimp-image-get-active-layer img)) 1)))
			)
			(gimp-image-insert-layer img varDupLayer 0 -1)
			(gimp-selection-all img)
			(gimp-edit-clear varDupLayer)
			(gimp-selection-none img)
			(gimp-by-color-select (car (gimp-image-get-layer-by-name img "very large pixels (tmp)")) '(144 144 144) 2 CHANNEL-OP-ADD TRUE FALSE 0 FALSE)
			(gimp-edit-copy (car (gimp-image-get-layer-by-name img "area-brush extract (tmp)")))
			(set! floating-selection (car (gimp-edit-paste varDupLayer FALSE)))
			(gimp-floating-sel-anchor floating-selection)
			(gimp-layer-set-name varDupLayer "vl6")
		)
		(gimp-image-set-active-layer img (car (gimp-image-get-layer-by-name img "vl6")))
		(let* (
				(varDupLayer (car (gimp-layer-copy (car (gimp-image-get-active-layer img)) 1)))
			)
			(gimp-image-insert-layer img varDupLayer 0 -1)
			(gimp-selection-all img)
			(gimp-edit-clear varDupLayer)
			(gimp-selection-none img)
			(gimp-by-color-select (car (gimp-image-get-layer-by-name img "very large pixels (tmp)")) '(100 100 100) 2 CHANNEL-OP-ADD TRUE FALSE 0 FALSE)
			(gimp-edit-copy (car (gimp-image-get-layer-by-name img "area-brush extract (tmp)")))
			(set! floating-selection (car (gimp-edit-paste varDupLayer FALSE)))
			(gimp-floating-sel-anchor floating-selection)
			(gimp-layer-set-name varDupLayer "vl7")
		)
		(gimp-image-set-active-layer img (car (gimp-image-get-layer-by-name img "vl7")))
				(let* (
				(varDupLayer (car (gimp-layer-copy (car (gimp-image-get-active-layer img)) 1)))
			)
			(gimp-image-insert-layer img varDupLayer 0 -1)
			(gimp-selection-all img)
			(gimp-edit-clear varDupLayer)
			(gimp-selection-none img)
			(gimp-by-color-select (car (gimp-image-get-layer-by-name img "very large pixels (tmp)")) '(84 84 84) 2 CHANNEL-OP-ADD TRUE FALSE 0 FALSE)
			(gimp-edit-copy (car (gimp-image-get-layer-by-name img "area-brush extract (tmp)")))
			(set! floating-selection (car (gimp-edit-paste varDupLayer FALSE)))
			(gimp-floating-sel-anchor floating-selection)
			(gimp-layer-set-name varDupLayer "vl8")
		)
		(gimp-image-set-active-layer img (car (gimp-image-get-layer-by-name img "vl8")))
		(let* (
				(varDupLayer (car (gimp-layer-copy (car (gimp-image-get-active-layer img)) 1)))
			)
			(gimp-image-insert-layer img varDupLayer 0 -1)
			(gimp-selection-all img)
			(gimp-edit-clear varDupLayer)
			(gimp-selection-none img)
			(gimp-by-color-select (car (gimp-image-get-layer-by-name img "very large pixels (tmp)")) '(78 78 78) 1 CHANNEL-OP-ADD TRUE FALSE 0 FALSE)
			(gimp-edit-copy (car (gimp-image-get-layer-by-name img "area-brush extract (tmp)")))
			(set! floating-selection (car (gimp-edit-paste varDupLayer FALSE)))
			(gimp-floating-sel-anchor floating-selection)
			(gimp-layer-set-name varDupLayer "vl9")
		)
		(gimp-image-set-active-layer img (car (gimp-image-get-layer-by-name img "vl9")))
		(let* (
				(varDupLayer (car (gimp-layer-copy (car (gimp-image-get-active-layer img)) 1)))
			)
			(gimp-image-insert-layer img varDupLayer 0 -1)
			(gimp-selection-all img)
			(gimp-edit-clear varDupLayer)
			(gimp-selection-none img)
			(gimp-by-color-select (car (gimp-image-get-layer-by-name img "very large pixels (tmp)")) '(73 73 73) 2 CHANNEL-OP-ADD TRUE FALSE 0 FALSE)
			(gimp-edit-copy (car (gimp-image-get-layer-by-name img "area-brush extract (tmp)")))
			(set! floating-selection (car (gimp-edit-paste varDupLayer FALSE)))
			(gimp-floating-sel-anchor floating-selection)
			(gimp-layer-set-name varDupLayer "vl10")
		)
		(gimp-image-set-active-layer img (car (gimp-image-get-layer-by-name img "vl10")))		
		(let* (
				(varDupLayer (car (gimp-layer-copy (car (gimp-image-get-active-layer img)) 1)))
			)
			(gimp-image-insert-layer img varDupLayer 0 -1)
			(gimp-selection-all img)
			(gimp-edit-clear varDupLayer)
			(gimp-selection-none img)
			(gimp-by-color-select (car (gimp-image-get-layer-by-name img "very large pixels (tmp)")) '(55 55 55) 2 CHANNEL-OP-ADD TRUE FALSE 0 FALSE)
			(gimp-edit-copy (car (gimp-image-get-layer-by-name img "area-brush extract (tmp)")))
			(set! floating-selection (car (gimp-edit-paste varDupLayer FALSE)))
			(gimp-floating-sel-anchor floating-selection)
			(gimp-layer-set-name varDupLayer "vl11")
		)
		(gimp-image-set-active-layer img (car (gimp-image-get-layer-by-name img "vl11")))
		(let* (
				(varDupLayer (car (gimp-layer-copy (car (gimp-image-get-active-layer img)) 1)))
			)
			(gimp-image-insert-layer img varDupLayer 0 -1)
			(gimp-selection-all img)
			(gimp-edit-clear varDupLayer)
			(gimp-selection-none img)
			(gimp-by-color-select (car (gimp-image-get-layer-by-name img "very large pixels (tmp)")) '(41 41 41) 2 CHANNEL-OP-ADD TRUE FALSE 0 FALSE)
			(gimp-edit-copy (car (gimp-image-get-layer-by-name img "area-brush extract (tmp)")))
			(set! floating-selection (car (gimp-edit-paste varDupLayer FALSE)))
			(gimp-floating-sel-anchor floating-selection)
			(gimp-layer-set-name varDupLayer "vl12")
		)
		
		(gimp-context-set-feather 0)
		(gimp-selection-layer-alpha (car (gimp-image-get-layer-by-name img "area-brush")))
		(gimp-selection-invert img)
		(gimp-edit-clear (car (gimp-image-get-layer-by-name img "vl1")))
		(gimp-edit-clear (car (gimp-image-get-layer-by-name img "vl2")))
		(gimp-edit-clear (car (gimp-image-get-layer-by-name img "vl3")))
		(gimp-edit-clear (car (gimp-image-get-layer-by-name img "vl4")))
		(gimp-edit-clear (car (gimp-image-get-layer-by-name img "vl5")))
		(gimp-edit-clear (car (gimp-image-get-layer-by-name img "vl6")))
		(gimp-edit-clear (car (gimp-image-get-layer-by-name img "vl7")))
		(gimp-edit-clear (car (gimp-image-get-layer-by-name img "vl8")))
		(gimp-edit-clear (car (gimp-image-get-layer-by-name img "vl9")))
		(gimp-edit-clear (car (gimp-image-get-layer-by-name img "vl10")))
		(gimp-edit-clear (car (gimp-image-get-layer-by-name img "vl11")))
		(gimp-edit-clear (car (gimp-image-get-layer-by-name img "vl12")))
		(gimp-selection-none img)
		;;
		

		;;
		;; ************************************************************************************************************************************
		(if (= inPixelDirection 0)
			(begin
				(gimp-layer-translate (car (gimp-image-get-layer-by-name img "s1")) (/ ImageWidth 19) 0)
				(gimp-layer-translate (car (gimp-image-get-layer-by-name img "s2")) (/ ImageWidth 3) 0)
				(gimp-layer-translate (car (gimp-image-get-layer-by-name img "s3")) (/ ImageWidth 11) 0)
				(gimp-layer-translate (car (gimp-image-get-layer-by-name img "s4")) (/ ImageWidth 4) 0)
				(gimp-layer-translate (car (gimp-image-get-layer-by-name img "s5")) (/ ImageWidth 4.7) 0)
				(gimp-layer-translate (car (gimp-image-get-layer-by-name img "s7")) (/ ImageWidth 5.1) 0)
				(gimp-layer-translate (car (gimp-image-get-layer-by-name img "s8")) (/ ImageWidth 21) 0)
				(gimp-layer-translate (car (gimp-image-get-layer-by-name img "s10")) (/ ImageWidth 9.8) 0)
				(gimp-layer-translate (car (gimp-image-get-layer-by-name img "s11")) (/ ImageWidth 3.8) 0)
				(gimp-layer-translate (car (gimp-image-get-layer-by-name img "s12")) (/ ImageWidth 3.1) 0)
				(gimp-layer-translate (car (gimp-image-get-layer-by-name img "s13")) (/ ImageWidth 4.5) 0)
				(gimp-layer-translate (car (gimp-image-get-layer-by-name img "s14")) (rand 140) 0)
				(gimp-layer-translate (car (gimp-image-get-layer-by-name img "s15")) (/ ImageWidth 6.7) 0)
				(gimp-layer-translate (car (gimp-image-get-layer-by-name img "s16")) (/ ImageWidth 20) 0)
				(gimp-layer-translate (car (gimp-image-get-layer-by-name img "s17")) (rand 60) 0)
				(gimp-layer-translate (car (gimp-image-get-layer-by-name img "s18")) (/ ImageWidth 4) 0)
				(gimp-layer-translate (car (gimp-image-get-layer-by-name img "s19")) (rand 200) 0)
				(gimp-layer-translate (car (gimp-image-get-layer-by-name img "s20")) (rand 30) 0)
				(gimp-layer-translate (car (gimp-image-get-layer-by-name img "s21")) (/ ImageWidth 4.5) 0)
				(gimp-layer-translate (car (gimp-image-get-layer-by-name img "s22")) (/ ImageWidth 5.5) 0)
			)
			;;
			(if (= inPixelDirection 1)
				(begin
					(gimp-layer-translate (car (gimp-image-get-layer-by-name img "s1")) (-(/ ImageWidth 19)) 0)
					(gimp-layer-translate (car (gimp-image-get-layer-by-name img "s2")) (-(/ ImageWidth 3)) 0)
					(gimp-layer-translate (car (gimp-image-get-layer-by-name img "s3")) (-(/ ImageWidth 11)) 0)
					(gimp-layer-translate (car (gimp-image-get-layer-by-name img "s4")) (-(/ ImageWidth 4)) 0)
					(gimp-layer-translate (car (gimp-image-get-layer-by-name img "s5")) (-(/ ImageWidth 4.7)) 0)
					(gimp-layer-translate (car (gimp-image-get-layer-by-name img "s7")) (-(/ ImageWidth 5.1)) 0)
					(gimp-layer-translate (car (gimp-image-get-layer-by-name img "s8")) (-(/ ImageWidth 21)) 0)
					(gimp-layer-translate (car (gimp-image-get-layer-by-name img "s10")) (-(/ ImageWidth 9.8)) 0)
					(gimp-layer-translate (car (gimp-image-get-layer-by-name img "s11")) (-(/ ImageWidth 3.8)) 0)
					(gimp-layer-translate (car (gimp-image-get-layer-by-name img "s12")) (-(/ ImageWidth 3.1)) 0)
					(gimp-layer-translate (car (gimp-image-get-layer-by-name img "s13")) (-(/ ImageWidth 4.5)) 0)
					(gimp-layer-translate (car (gimp-image-get-layer-by-name img "s14")) (-(rand 140)) 0)
					(gimp-layer-translate (car (gimp-image-get-layer-by-name img "s15")) (-(/ ImageWidth 6.7)) 0)
					(gimp-layer-translate (car (gimp-image-get-layer-by-name img "s16")) (-(/ ImageWidth 20)) 0)
					(gimp-layer-translate (car (gimp-image-get-layer-by-name img "s17")) (-(rand 60)) 0)
					(gimp-layer-translate (car (gimp-image-get-layer-by-name img "s18")) (-(/ ImageWidth 4)) 0)
					(gimp-layer-translate (car (gimp-image-get-layer-by-name img "s19")) (-(rand 200)) 0)
					(gimp-layer-translate (car (gimp-image-get-layer-by-name img "s20")) (-(rand 30)) 0)
					(gimp-layer-translate (car (gimp-image-get-layer-by-name img "s21")) (-(/ ImageWidth 4.5)) 0)
					(gimp-layer-translate (car (gimp-image-get-layer-by-name img "s22")) (-(/ ImageWidth 5.5)) 0)
				)
			)
		)

		(plug-in-gauss (if (= inRunMode TRUE) (begin RUN-INTERACTIVE) RUN-NONINTERACTIVE) img (car (gimp-image-get-layer-by-name img "s12")) 3 3 1)
		
		;;
		(gimp-image-reorder-item img (car (gimp-image-get-layer-by-name img "s6")) (car (gimp-image-get-layer-by-name img "Pixels! parts (doge Mode)")) 0)
		(gimp-image-reorder-item img (car (gimp-image-get-layer-by-name img "s9")) (car (gimp-image-get-layer-by-name img "Pixels! parts (doge Mode)")) 0)
		(gimp-image-reorder-item img (car (gimp-image-get-layer-by-name img "s23")) (car (gimp-image-get-layer-by-name img "Pixels! parts (doge Mode)")) 0)

		;;
		;; ************************************************************************************************************************************		
		(if (= inPixelDirection 0)
			(begin
				(gimp-layer-translate (car (gimp-image-get-layer-by-name img "m4")) (/ ImageWidth 4.3) 0)
				(gimp-layer-translate (car (gimp-image-get-layer-by-name img "m2")) (/ ImageWidth 11) 0)
				(gimp-layer-translate (car (gimp-image-get-layer-by-name img "m3")) (/ ImageWidth 6.7) 0)
				(gimp-layer-translate (car (gimp-image-get-layer-by-name img "m5")) (/ ImageWidth 6.3) 0)
				(gimp-layer-translate (car (gimp-image-get-layer-by-name img "m7")) (/ ImageWidth 4.6) 0)
				(gimp-layer-translate (car (gimp-image-get-layer-by-name img "m9")) (/ ImageWidth 7.6) 0)
				(gimp-layer-translate (car (gimp-image-get-layer-by-name img "m10")) (/ ImageWidth 2.6) 0)
				(gimp-layer-translate (car (gimp-image-get-layer-by-name img "m11")) (rand 120) 0)
				(gimp-layer-translate (car (gimp-image-get-layer-by-name img "m14")) (rand 90) 0)
				(gimp-layer-translate (car (gimp-image-get-layer-by-name img "m15")) (/ ImageWidth 6.3) 0)
				(gimp-layer-translate (car (gimp-image-get-layer-by-name img "m16")) (/ ImageWidth 5.3) 0)
				(gimp-layer-translate (car (gimp-image-get-layer-by-name img "m17")) (/ ImageWidth 4.3) 0)
				(gimp-layer-translate (car (gimp-image-get-layer-by-name img "m18")) (/ ImageWidth 6.2) 0)
				(gimp-layer-translate (car (gimp-image-get-layer-by-name img "m19")) (rand 60) 0)
				(gimp-layer-translate (car (gimp-image-get-layer-by-name img "m21")) (/ ImageWidth 8.2) 0)
				(gimp-layer-translate (car (gimp-image-get-layer-by-name img "m22")) (rand 40) 0)
			)
			;;
			(if (= inPixelDirection 1)
				(begin
					(gimp-layer-translate (car (gimp-image-get-layer-by-name img "m4")) (-(/ ImageWidth 4.3)) 0)
					(gimp-layer-translate (car (gimp-image-get-layer-by-name img "m2")) (-(/ ImageWidth 11)) 0)
					(gimp-layer-translate (car (gimp-image-get-layer-by-name img "m3")) (-(/ ImageWidth 6.7)) 0)
					(gimp-layer-translate (car (gimp-image-get-layer-by-name img "m5")) (-(/ ImageWidth 6.3)) 0)
					(gimp-layer-translate (car (gimp-image-get-layer-by-name img "m7")) (-(/ ImageWidth 4.6)) 0)
					(gimp-layer-translate (car (gimp-image-get-layer-by-name img "m9")) (-(/ ImageWidth 7.6)) 0)
					(gimp-layer-translate (car (gimp-image-get-layer-by-name img "m10")) (-(/ ImageWidth 2.6)) 0)
					(gimp-layer-translate (car (gimp-image-get-layer-by-name img "m11")) (-(rand 120)) 0)
					(gimp-layer-translate (car (gimp-image-get-layer-by-name img "m14")) (-(rand 90)) 0)
					(gimp-layer-translate (car (gimp-image-get-layer-by-name img "m15")) (-(/ ImageWidth 6.3)) 0)
					(gimp-layer-translate (car (gimp-image-get-layer-by-name img "m16")) (-(/ ImageWidth 5.3)) 0)
					(gimp-layer-translate (car (gimp-image-get-layer-by-name img "m17")) (-(/ ImageWidth 4.3)) 0)
					(gimp-layer-translate (car (gimp-image-get-layer-by-name img "m18")) (-(/ ImageWidth 6.2)) 0)
					(gimp-layer-translate (car (gimp-image-get-layer-by-name img "m19")) (-(rand 60)) 0)
					(gimp-layer-translate (car (gimp-image-get-layer-by-name img "m21")) (-(/ ImageWidth 8.2)) 0)
					(gimp-layer-translate (car (gimp-image-get-layer-by-name img "m22")) (-(rand 40)) 0)
				)
			)
		)
		;;
		(gimp-layer-scale (car (gimp-image-get-layer-by-name img "m6")) (* ImageWidth 1.12) (* ImageHeight 1.12) TRUE)
		(gimp-layer-scale (car (gimp-image-get-layer-by-name img "m8")) (* ImageWidth 1.28) (* ImageHeight 1.28) TRUE)
		(gimp-layer-scale (car (gimp-image-get-layer-by-name img "m16")) (* ImageWidth 1.88) (* ImageHeight 1.88) TRUE)
		;;
		(gimp-image-reorder-item img (car (gimp-image-get-layer-by-name img "m20")) (car (gimp-image-get-layer-by-name img "Pixels! parts (doge Mode)")) 0)
		
		;;
		(if (= inPixelDirection 0)
			(begin
				(gimp-layer-translate (car (gimp-image-get-layer-by-name img "l1")) (/ ImageWidth 3.9) 0)
				(gimp-layer-translate (car (gimp-image-get-layer-by-name img "l2")) (/ ImageWidth 6.9) 0)
				(gimp-layer-translate (car (gimp-image-get-layer-by-name img "l3")) (/ ImageWidth 10.5) 0)
				(gimp-layer-translate (car (gimp-image-get-layer-by-name img "l5")) (/ ImageWidth 6.3) 0)
				(gimp-layer-translate (car (gimp-image-get-layer-by-name img "l6")) (/ ImageWidth 3.5) 0)
				(gimp-layer-translate (car (gimp-image-get-layer-by-name img "l7")) (rand 90) 0)
				(gimp-layer-translate (car (gimp-image-get-layer-by-name img "l8")) (/ ImageWidth 7.5) 0)
				(gimp-layer-translate (car (gimp-image-get-layer-by-name img "l10")) (/ ImageWidth 10.5) 0)
				(gimp-layer-translate (car (gimp-image-get-layer-by-name img "l11")) (/ ImageWidth 7.5) 0)
				(gimp-layer-translate (car (gimp-image-get-layer-by-name img "l12")) (/ ImageWidth 11.5) 0)
				(gimp-layer-translate (car (gimp-image-get-layer-by-name img "l13")) (/ ImageWidth 2.5) 0)
				(gimp-layer-translate (car (gimp-image-get-layer-by-name img "l15")) (rand 200) 0)
				(gimp-layer-translate (car (gimp-image-get-layer-by-name img "l16")) (/ ImageWidth 4.7) 0)
				(gimp-layer-translate (car (gimp-image-get-layer-by-name img "l17")) (/ ImageWidth 6.1) 0)
				(gimp-layer-translate (car (gimp-image-get-layer-by-name img "l18")) (/ ImageWidth 3.1) 0)
			)
			;;
			(if (= inPixelDirection 1)
				(begin
					(gimp-layer-translate (car (gimp-image-get-layer-by-name img "l1")) (-(/ ImageWidth 3.9)) 0)
					(gimp-layer-translate (car (gimp-image-get-layer-by-name img "l2")) (-(/ ImageWidth 6.9)) 0)
					(gimp-layer-translate (car (gimp-image-get-layer-by-name img "l3")) (-(/ ImageWidth 10.5)) 0)
					(gimp-layer-translate (car (gimp-image-get-layer-by-name img "l5")) (-(/ ImageWidth 6.3)) 0)
					(gimp-layer-translate (car (gimp-image-get-layer-by-name img "l6")) (-(/ ImageWidth 3.5)) 0)
					(gimp-layer-translate (car (gimp-image-get-layer-by-name img "l7")) (-(rand 90)) 0)
					(gimp-layer-translate (car (gimp-image-get-layer-by-name img "l8")) (-(/ ImageWidth 7.5)) 0)
					(gimp-layer-translate (car (gimp-image-get-layer-by-name img "l10")) (-(/ ImageWidth 10.5)) 0)
					(gimp-layer-translate (car (gimp-image-get-layer-by-name img "l11")) (-(/ ImageWidth 7.5)) 0)
					(gimp-layer-translate (car (gimp-image-get-layer-by-name img "l12")) (-(/ ImageWidth 11.5)) 0)
					(gimp-layer-translate (car (gimp-image-get-layer-by-name img "l13")) (-(/ ImageWidth 2.5)) 0)
					(gimp-layer-translate (car (gimp-image-get-layer-by-name img "l15")) (-(rand 200)) 0)
					(gimp-layer-translate (car (gimp-image-get-layer-by-name img "l16")) (-(/ ImageWidth 4.7)) 0)
					(gimp-layer-translate (car (gimp-image-get-layer-by-name img "l17")) (-(/ ImageWidth 6.1)) 0)
					(gimp-layer-translate (car (gimp-image-get-layer-by-name img "l18")) (-(/ ImageWidth 3.1)) 0)
				)
			)
		)
		;;
		(gimp-layer-scale (car (gimp-image-get-layer-by-name img "l9")) (* ImageWidth 1.52) (* ImageHeight 1.52) TRUE)
		(gimp-layer-scale (car (gimp-image-get-layer-by-name img "l4")) (* ImageWidth 1.66) (* ImageHeight 1.66) TRUE)
		(gimp-layer-scale (car (gimp-image-get-layer-by-name img "l7")) (* ImageWidth 1.96) (* ImageHeight 1.96) TRUE)
		(gimp-layer-scale (car (gimp-image-get-layer-by-name img "l10")) (* ImageWidth 1.46) (* ImageHeight 1.46) TRUE)
		(gimp-layer-scale (car (gimp-image-get-layer-by-name img "l14")) (* ImageWidth 1.17) (* ImageHeight 1.17) TRUE)
		(gimp-layer-scale (car (gimp-image-get-layer-by-name img "l17")) (* ImageWidth 1.37) (* ImageHeight 1.37) TRUE)

		;;
		(if (= inPixelDirection 0)
			(begin		
				(gimp-layer-translate (car (gimp-image-get-layer-by-name img "vl1")) (/ ImageWidth 12.2) 0)
				(gimp-layer-translate (car (gimp-image-get-layer-by-name img "vl6")) (/ ImageWidth 6.2) 0)
				(gimp-layer-translate (car (gimp-image-get-layer-by-name img "vl11")) (/ ImageWidth 5.9) 0)
				(gimp-layer-translate (car (gimp-image-get-layer-by-name img "vl10")) (/ ImageWidth 12.2) 0)
				(gimp-layer-translate (car (gimp-image-get-layer-by-name img "vl12")) (/ ImageWidth 3.9) 0)
			)
			;;
			(if (= inPixelDirection 1)
				(begin		
					(gimp-layer-translate (car (gimp-image-get-layer-by-name img "vl1")) (-(/ ImageWidth 12.2)) 0)
					(gimp-layer-translate (car (gimp-image-get-layer-by-name img "vl6")) (-(/ ImageWidth 6.2)) 0)
					(gimp-layer-translate (car (gimp-image-get-layer-by-name img "vl11")) (-(/ ImageWidth 5.9)) 0)
					(gimp-layer-translate (car (gimp-image-get-layer-by-name img "vl10")) (-(/ ImageWidth 12.2)) 0)
					(gimp-layer-translate (car (gimp-image-get-layer-by-name img "vl12")) (-(/ ImageWidth 3.9)) 0)
				)
			)
		)
		;;
		(gimp-layer-scale (car (gimp-image-get-layer-by-name img "vl12")) (* ImageWidth 1.4) (* ImageHeight 1.4) FALSE)
		(gimp-layer-scale (car (gimp-image-get-layer-by-name img "vl6")) (* ImageWidth 1.8) (* ImageHeight 1.8) FALSE)
		
		;;
		(gimp-layer-set-mode (car (gimp-image-get-layer-by-name img "Pixels! very large parts")) SCREEN-MODE)

		
		;;
		;; ************************************************************************************************************************************
		(gimp-by-color-select (car (gimp-image-get-layer-by-name img "small pixels (tmp)")) '(0 0 0) 0 CHANNEL-OP-ADD TRUE FALSE 0 FALSE)
		(gimp-selection-invert img)
		(gimp-edit-copy bg-layer)
		(gimp-selection-none img)
		
		(gimp-image-set-active-layer img (car (gimp-image-get-layer-by-name img "area-brush extract (tmp)")))
		(gimp-image-insert-layer img small-overlay-layer 0 -1)
		(set! floating-selection (car (gimp-edit-paste small-overlay-layer FALSE)))
		(gimp-floating-sel-anchor floating-selection)
		(gimp-selection-layer-alpha brush-mask-layer)
		;;
		(set! small-overlay-layer-mask (car (gimp-layer-create-mask (car (gimp-image-get-layer-by-name img "grid pixel overlay (small)")) ADD-SELECTION-MASK)))
		(gimp-image-add-layer-mask img (car (gimp-image-get-layer-by-name img "grid pixel overlay (small)")) small-overlay-layer-mask)
		
		(gimp-selection-none img)
		;;

		
		;;
		;; ************************************************************************************************************************************
		(gimp-by-color-select (car (gimp-image-get-layer-by-name img "medium pixels (tmp)")) '(0 0 0) 0 CHANNEL-OP-ADD TRUE FALSE 0 FALSE)
		(gimp-selection-invert img)
		(gimp-edit-copy bg-layer)
		(gimp-selection-none img)
		
		(gimp-image-set-active-layer img (car (gimp-image-get-layer-by-name img "grid pixel overlay (small)")))
		(gimp-image-insert-layer img medium-overlay-layer 0 -1)
		(set! floating-selection (car (gimp-edit-paste medium-overlay-layer FALSE)))
		(gimp-floating-sel-anchor floating-selection)
		(gimp-selection-layer-alpha brush-mask-layer)
		;;
		(set! medium-overlay-layer-mask (car (gimp-layer-create-mask (car (gimp-image-get-layer-by-name img "grid pixel overlay (medium)")) ADD-SELECTION-MASK)))
		(gimp-image-add-layer-mask img (car (gimp-image-get-layer-by-name img "grid pixel overlay (medium)")) medium-overlay-layer-mask)
		
		(gimp-selection-none img)
		;;


		;;
		(gimp-image-reorder-item img (car (gimp-image-get-layer-by-name img "l17")) 0 -1)
		(gimp-image-reorder-item img (car (gimp-image-get-layer-by-name img "m16")) 0 -1)
		(gimp-image-merge-down img (car (gimp-image-get-layer-by-name img "m16")) CLIP-TO-BOTTOM-LAYER)
		(gimp-item-set-name (car (gimp-image-get-layer-by-name img "l17")) "foreground parts")
		(plug-in-gauss (if (= inRunMode TRUE) (begin RUN-INTERACTIVE) RUN-NONINTERACTIVE) img (car (gimp-image-get-layer-by-name img "foreground parts")) 60 60 1)
		(gimp-layer-resize-to-image-size (car (gimp-image-get-layer-by-name img "foreground parts")))
		

		;;
		(gimp-image-remove-layer img (car (gimp-image-get-layer-by-name img "very large pixels (tmp)")))
		(gimp-image-remove-layer img (car (gimp-image-get-layer-by-name img "large pixels (tmp)")))
		(gimp-image-remove-layer img (car (gimp-image-get-layer-by-name img "medium pixels (tmp)")))
		(gimp-image-remove-layer img (car (gimp-image-get-layer-by-name img "small pixels (tmp)")))
		(gimp-image-remove-layer img (car (gimp-image-get-layer-by-name img "area-brush extract (tmp)")))


		;;
		(gimp-palette-set-background old-bg)
		(gimp-palette-set-foreground old-fg)
		(gimp-context-pop)
		(if (= inUndoMode TRUE) (begin (gimp-image-undo-group-end img)) )

		(gimp-displays-flush)
	) ;;
)